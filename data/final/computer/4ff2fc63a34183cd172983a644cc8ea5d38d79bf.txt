There is an emerging interest in using agile methodologies in Global Software Development (GSD) to get the mutual benefits of both methods. Scrum is currently admired by many development teams as an agile most known methodology and considered adequate for collocated teams. At the same time, stakeholders in GSD are dispersed by geographical, temporal, and socio-cultural distances. Due to the controversial nature of Scrum and GSD, many significant challenges arise that might restrict the use of Scrum in GSD. We conducted a Systematic Literature Review (SLR) by following Kitchenham guidelines to identify the challenges that limit the use of Scrum in GSD and to explore the mitigation strategies adopted by practitioners to resolve the challenges. To validate our review findings, we conducted an industrial survey of 305 practitioners. The results of our study are consolidated into a research framework. The framework represents current best practices and recommendations to mitigate the identified distributed scrum challenges and is validated by five experts of distributed Scrum. Results of the expert review were found supportive, reflecting that the framework will help the stakeholders deliver sustainable products by effectively mitigating the identified challenges. 1 introduction Global software development (GSD) is a recent ongoing trend in the software development industry [1], that usually engage stakeholders situated in various geographic locations and time zones, from different national and organizational cultures. It provides approach to the organization to competent and skillful resources at a lesser cost and easy accessibility to the markets [2]. GSD also has some challenges, which is not part of (or not as prominent) in traditional co-located development i.e., geographical, temporal, and
This work is licensed under a Creative Commons Attribution 4.0 International License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. socio-cultural distances that can lead to meaningful communication, coordination, and collaboration challenges that must be controlled to achieve the benefits of GSD [3]. There is a rising interest of implementing agile practices in GSD projects to get the mutual benefits of both methods [1]. Scrum, as an Agile common and most important practice, recently admired by many software teams in Agile distributed development. According to survey the scrum method of Agile software development is used over by 89% of agile development teams [3]. From the latest survey about agile practice acceptance rate, it is stated that agile methods could be effectively used by considerably dispersed members of a team. Another survey stated that, from the several agile practices, Scrum practices have a greater acceptance rate. Hence, it can be argued that the Scrum, which is the main component of agile is becoming popular gradually and could be effectively used by the teams that are dispersed globally [4]. As scrum teams are self-organized, enabled on excellent team collaboration and communication. Hence, it is hard to directly implement Scrum practices in GSD because in GSD development, team members are distributed physically by time-based, geographical, and socio-cultural distances resulting in numerous challenges or issues that might affect teams’ communication and collaboration process [1]. There are multiple challenges confronted by man organizations who are using scrum practices in GSD [5]. We conducted up-to-date SLR to identify the challenges confronted by distributed scrum teams and the mitigation strategies adopted by teams to overcome the confronted challenges. While conducting the pilot review, it was observed that some studies have already proposed frameworks to mitigate the challenges. Still, their proposed frameworks are for resolving some specific challenges i.e., in [2], a framework is proposed to mitigate communication challenges. Similarly, in [3] author proposed a framework to manage risks in distributed Scrum, and most of the frameworks identified in the literature was unevaluated. To our best knowledge, we did not find any study that has developed a framework by identifying the latest challenges of distributed Scrum with the framework to mitigate all the confronted challenges. Therefore, we aimed to identify and explore all the challenges by conducting up-to-date SLR and develop a framework to mitigate the identified challenges. The findings of this study will help the practitioners to understand the challenges that could be confronted while doing development in distributed scrum, and our proposed framework will help them to mitigate the challenges effectively to ensure sustainable development. The rest of the paper is organized in the following different sections: Section 2 discusses the background and related work. Section 3 describes the research method. Section 4 describes the research questions. Section 5 discusses the proposed framework, while Section 6 presents the results and discussion. Section 7 focuses on validity issues. Finally, Section 8 concludes with the implications of the study and guidance for future research. 2 background This section discusses the overview of the scrum framework and related work of our study. 2.1 overview of scrum process Scrum is a hybrid model which is the combination of iterative and incremental models [3]. Using Scrum, the software is delivered in different increments called “Sprints” (typically 2–4 weeks iterations). Every sprint starts with the planning of sprint and ends with sprint review. Sprint planning is a time-bound meeting from the scrum team and could be last for up to 4 hours. The meeting is devoted to the development of detailed plans for the sprint. After that sprint review meeting is conducted, that is attended by the stakeholders of the projects to assess the business conditions, the market, and the technology. The
review meetings possibly will also be last for more than 4 hours. A retrospective meeting could also be planned to evaluate the teamwork in finalized sprints. Day-to-day scrum meeting conducted by the team is 15-minute long in which every participant of the team addresses the questions what I did yesterday, what is my today’s task, and what obstacles are there to perform my task? Scrum creates 3 artifacts: product backlogs, sprint backlogs, and burn-down charts. Backlogs contain requirements from customers, and daily burn down indicates the total remaining work [4]. Fig. 1 shows the overview of scrum process. 2.2 distributed scrum model There are three commonly observed and used model of distributed Scrum i.e., Isolated Scrum, Distributed Scrum of Scrum and Totally Integrated Scrum [4]. 2.2.1 isolated scrum In this model, scrum teams are isolated geographically. Mostly offshore teams are either not crossfunctional or not using the process of Scrum [4]. 2.2.2 distributed scrum of scrum In this model, scrum teams are distributed geographically but are connected through regular SoS meetings [4]. 2.2.3 totally integrated scrum In this model, teams are geographically distributed and are cross-functional with the members that are distributed among geographies [4]. 2.3 related work Agile approaches have been originally designed for co-located software development, and it is hard to directly apply these methods to distributed development [6] and have a lots of challenges and issues while executing scrum in distributed and GSD, that needs to be discussed to overcome the challenges and issues from distributed Scrum to ensure sustainable development. This paper [7] discussed the patterns and the challenges related to the development patterns used in distributed scrum development. Different challenges were identified, and a case study was performed. The outcomes of the case study show that distributed scrum has many benefits if it gets implemented successfully, and the members of the team are more satisfied with the newly distributed scrum as compared to traditional approaches, even though there are still some challenges that must be addressed and resolved in upcoming improvement efforts. The limitation of the paper is that the analysis of proposed patterns is not performed. Paper [8] performed a case study on the organization which is using scrum practices. 22 semi-structured interviews were conducted to find out the challenges of scaling Scrum. Different challenges are confronted while implementing agile practices such as Scrum-of-Scrums, area product owners, common retrospective, common sprint demo, and common sprint planning. It is found that practical implementation of scaling distributed scrum is not as easy as it seems in theoretical manners in books. The limitation of the study is that most of the interviews were conducted from the main site so, there are chances of bias as results might be different if other sites have been involved. In [9] authors conducted SLR to determine the human-related factors that can negatively influence while adopting agile in GSD. 11 different challenges were found, and 6 out of 11 challenges found critical challenges having the frequency of ≥50%. The challenges that were found critical were: lack of communication with the highest frequency of (88%), lack of customer involvement having a frequency (83%), lack of management commitments with the frequency of (72%), lack of requirements analysis with the frequency of (56%), lack of knowledge sharing (56%) and lack of roles and responsibilities (50%). A hypothetical model was developed based on identified challenges, which shows the relationship between identified challenges and scaling agile in GSD. This paper [10] discuss an explanatory case study conducted in Norway for four years, on one of the largest software development programs to find out how agile methods are evolved to use for large scale and distributed development and what are the challenges encountered while using agile method in large scale development. It is found that communication, coordination and collaboration, customer involvement, knowledge sharing, and architecture management are the most challenging areas while using agile methods in large-scale development. In paper [11], SLR is conducted to determine the themes and primary issues of distributed agile development. It is found that project planning and management, communication, coordination, collaboration, cultural and quality assurance issues are the major concerns that need to be addressed and resolved to execute agile methodology in a distributive manner effectively. This paper limits in a way that it includes only articles published in IEEE, so the findings of this paper are limited in scope. 3 research methodology This paper explained a framework proposed by consolidating best practices, adopted by different teams to mitigate distributed scrum challenges. We conducted SLR by reviewing articles from 2005 to 2021 by following Kitchenham [12] to identify all the challenges confronted by distributed scrum teams and mitigation strategies adopted by teams to overcome the challenges. Out of 3348 articles, we selected 56 articles by applying different filters that discussed distributed scrum challenges and mitigation strategies adopted by teams to overcome the challenges. Twelve significant challenges were identified through SLR, shown in Tab. 1. After identifying challenges, we conducted an industrial survey from 305 practitioners by following Kasunic guidelines [13] to validate the challenges identified through SLR to accept or reject the challenges. We used a 5-point Likert scale to ask questions, and two types of Likert scales i.e., agreement and frequency are used for that. The values used for both of Likert scales were ranging from “–2 to 2” and “0 to 4”. To evaluate our scales’ internal consistency and reliability to conduct a survey, we used Cronbach alpha’s value. As we have used 2 different Likert scales so, the first calculated value of Cronbach alpha was “0.85” and covered seven factors from the total 12 factors. Another type of likert scale covered the remaining five factors, and the calculated value for this scale against five factors was “0.86”. We set a criterion to accept and rejected each challenge and the challenges with an average value greater or equal to 0.90 for 1st type of likert scale got accepted, and from 2nd likert scale, factors with an average value greater or equal to 1.50 got accepted and remaining factors got rejected. Out of 12 factors, 8 factors got accepted by practitioners. Tab. 2 shows the challenges accepted and rejected through survey, and Fig. 2 shows the average weightage response against each factor. Next, a research framework is proposed by consolidating the best practice identified through SLR to mitigate the validated challenges through a survey. We conducted an expert review by interviewing 5 experts of distributed scrum, to evaluate the effectiveness of the proposed framework and ensure that the proposed framework will be helpful in sustainable development. 4 research questions While conducting pilot studies, we noticed that some studies have already proposed frameworks to mitigate the challenges. Still, their proposed frameworks are for the resolution of some specific challenges. To our best knowledge, we did not find any study that has identified the latest challenges of distributed Scrum and proposed a single framework to mitigate all the identified challenges. To address this gap, the following research questions were formulated:
RQ1: What are the challenges confronted by teams during the execution of Scrum in a distributive manner? RQ2: What are the mitigation strategies adopted by teams to treat the confronted challenges? Fig. 2 shows the challenges accepted and rejected by practitioners through surveys along with average weightage response against each factor. 5 proposed framework We developed a conceptual framework based on the identified challenges and mitigation strategies adopted by teams in distributed Scrum. The elements of our framework with its possible usage are discussed below. 5.1 framework development process To develop a conceptual framework, we carefully followed the few planned steps mentioned below:
To identify the components of our conceptual framework, we reviewed the several frameworks discussed in our selected studies i.e., ([9,11,14,15,16]). We conducted SLR to identify the challenges confronted by distributed scrum teams and then survey was conducted from practitioners to validate those identified challenges. Reviewed selected articles to identify the mitigation strategies adopted by distributed scrum teams to resolve or mitigate the confronted challenges. Finally, we consolidated the validated challenges by practitioners and best practices adopted by different teams to resolve those challenges, into a framework. 5.2 components of framework Our framework is broadly composed of 2 main components:
i) Major Challenges ii) Mitigation Strategies
Fig. 3 shows the framework we proposed. We have discussed each challenge along the mitigation strategies to reduce or overcome the challenges. 5.3 communication, coordination and collaboration Scrum is enabled on great communication, coordination, and collaboration among team so, it is the biggest challenge identified through literature and survey. Coordination and collaboration among teams depend upon communication so, communication is the key to better coordination and collaboration among teams [17]. Different resolution strategies are being by different teams to overcome these issues. We have identified some best strategies to overcome these issues. 5.3.1 maximize synchronized working hours This is a widely used strategy in distributed scrum development to improve effective communication among teams. As teams are working from different locations, with varying hours of working due to temporal differences, so project owners try to adjust overlapping working hours of distributed teams by allowing team members to attend meetings from home [1,9,16–25]. 5.3.2 open communication Open communication allow the team members to openly discuss their views about things and allow them to add suggestions in things, whenever required, that leads to better coordination and collaboration among teams [9,21,26–28]. 5.3.3 simulations As Scrum require face-to-face communication, which is not possible in distributed environment, so try to replace direct face-to-face communication with rich communication channels through simulations. Using high quality simulation tools for face-to-face discussion will help the teams to communicate effectively, leads to better coordination and collaboration among distributed teams [5,23,24,29]. 5.4 trust Trust is another significant challenge reported in the literature. Different factors are identified from the literature, including ineffective communication, coordination, and collaboration among teams, poor team bonding, cultural barriers, etc., that causes trust issues in distributed Scrum. Some best strategies we have identified from the literature include: 5.4.1 informal communication Informal communication is the strategy adopted by different teams, to build trust among team members. By adopting different modes of informal communication (i.e., individual or teleconferences, video conferences, emails, instant messages) with formal documentation can help to build trust among team members [14,19,25–30]. 5.4.2 pair programming It is another strategy adopted by teams to build trust among distributed teams by encouraging pair programming among teams. When team members collaborate to share things and experiences, it will positively affect the overall performance of teams [21,31–33]. 5.5 requirement engineering Although the concept of requirement engineering and scrum method seems incompatible because requirement engineering is all about heavy documentation throughout requirement engineering process and scrum does not demand huge documentation but, the team who are working in distributed Scrum are facing different challenges associated with requirement engineering due to many reasons including lack of formal documentation, invisible priorities of requirements, ambiguous and unclear requirements. The best resolution strategies we have identified from literature to resolve the requirement engineering issues include: 5.5.1 integrate user stories with use cases Unsynchronized user stories and use cases lead to misunderstandings among development teams about work progress and completion of work, primarily when teams work in a distributed environment. To avoid misunderstanding about work progress, it is important to integrate user stories with use cases before starting actual development [21,25,27,34–37]. 5.5.2 follow-up questions Follow-Up questions are very important to ensure that all the stakeholders have same understanding about the functionality of requirements. As the chances of misunderstood requirements are higher in distributed development. Correct and clear understanding of requirements can be ensured by asking follow-up question [13,28,38–42]. 5.5.3 visible requirement priorities Continuously changing priority of requirements lead to changes in software architecture, result in software architectural understanding issues. To resolve these issues, practitioners suggested finalizing the requirement and prioritizing them clearly before starting the actual development [9,20,41,43–45]. 5.5.4 formal document Although scrum do not require heavy documentation but, lack of documentation in distributed scrum development leads to many challenges, i.e., misunderstood or unclear requirements, requirement traceability issues, requirement change management, etc. To avoid these issues, it is important to maintain a formal requirement document with a standard template understandable to all distributed teams [19,27–30,46–49]. 5.6 software architectural understanding A clear understanding of software architecture is essential for the success of any project. Usually, the architecture of any software is based on 3–4 critical requirements [30]. As agile methods welcome changes at any stage of development so, teams working in distributed environments find it challenging because sometimes product owner could not deliver understandable requirements to the teams due to continuous changes in requirements and with the constant change in requirements, change in requirements remain unmanaged that lead to software architectural understanding issues. To mitigate this challenge, different teams adopt different practices. The best practice we identified for our framework includes: 5.6.1 understanding of architecture drivers To equally understand the critical requirements, devote multiple iterations to finalize those critical requirements on which the software architecture is based upon, and design high level architecture, to avoid the changes in critical requirements and the conflict about critical requirements among teams [50–53]. 5.6.2 managed requirement changes Maintain a unified repository with the traceability process for requirement changes, accessible to all development teams and teams get notified whenever any change is requested against any predefined requirements. It helps to timely exchange the information between product owner and development teams, regarding the request of change in requirement by customers and the possibility about the acceptance of those change requests with their effect on overall development process [29,30,33–36]. 5.7 project management Project management itself complex task and managing a project in distributed environment is an even more difficult task due to geographical, socio-cultural distance, and temporal differences. Product owners adopt different strategies to mitigate project management issues. Some best strategies include: 5.7.1 people management While assigning the task to the teams, clearly consider the competencies required to accomplish that task, and after assigning the task to the teams, clearly define the responsibilities of each member of team related to a specific task, and use tools to track the progress of the team and the work [8,23,54–59]. 5.7.2 regular feedback Get regular feedback from stakeholders about work by regularly communicating with them to ensure that the team is progressing in the right direction [12,44,60–64]. 5.7.3 training Providing training or coaching to teams about work whenever is required or demanded by teams, to teach common skills to all distributed teams. It help the teams timely deliver the exact product demanded by customers. Allowing or sponsoring the teams to attend the training organized by another organization help the teams to enhance their skills in latest technology results in better performance from teams [35,65–71]. 5.8 knowledge sharing and management To mitigate the knowledge sharing and management challenge in distributed scrum development, different strategies are defined in the literature. The best practices that we have identified are: 5.8.1 sharing management By maintaining a unified backlog that gets updated timely according to work progress and by maintaining a knowledge management system that can track the performance and progress of the teams about the work to be done and completed work and access to all the teams can help the teams to resolve this knowledge sharing and management issues as common data will be visible to all teams [40,72–76]. 5.8.2 standard mechanism By defining a proper mechanism and standard template to share data (i.e., standard template for project documentation for all the teams) among distributed teams can help to cover the knowledge sharing and management issues [50–54,73,77–79]. 5.9 shared understanding To ensure the equal understanding of the team members about the work to be done, different strategies are adopted by product owners as lack to shared understanding among teams can lead to project failure. Some best practices identified from literature to ensure shared understanding includes: 5.9.1 trainings By providing training about different cultures in different languages can help to encourage the teams to communicate openly without hesitation and can help to overcome language barrier [16,80–83]. 5.9.2 common tools By ensuring the usage of common tools for development by all the distributed teams working on similar projects can help the teams to easily understand the data or information shared with them [9,59–62]. 5.9.3 Unified Backlog By maintaining a unified backlog having clearly visible requirements for all the teams can help to overcome the issue of shared understanding, as all teams will be able to access and view the common data along with the progress of the work in terms of completed sprints and current sprints [22,32,63,78,84–86]. 5.10 technical issues To ensure sustainable development, the teams need to be technically advanced, especially when teams are working in distributed Scrum as, Scrum is enabled on continuous communication and collaboration among teams. Effective and continuous communication and collaboration among distributed teams is possible only when teams are equipped with advanced technology. From literature, it is reported that many distributed scrum teams are facing technical dependency challenges due to lack of effective tools support for scrum processes, ineffective communication tools, lack of trainings, lack of globally shared unified backlogs and lack of information about organizational infrastructures. It is important to mitigate all the technical dependency issues to develop and deploy sustainable product while working in distributed scrum [9,86]. Technical issues can be mitigated by focusing on all other challenges identified in this study. 6 results and discussion We conducted SLR to identify the challenges confronted by distributed scrum teams while developing and the mitigation strategies adopted by teams to resolve the challenges. From the selected 56 studies, 12 major challenges were identified. Tab. 1 shows the challenges identified through SLR along with their frequency of occurrence, i.e., 91% of studies chosen discusses communication, coordination, and collaboration issues, 28% of studies discusses knowledge sharing and management issues, 28% of studies discusses technical issues, and 25% of studies discusses project management issues. After identifying challenges, we conducted an industrial survey to validate the challenges identified through SLR by practitioners to accept or reject the challenges. Out of 12 challenges, eight challenges were accepted by following defined criteria based on average weightage response against each challenge. The remaining challenges were rejected. Tab. 2 shows the accepted and rejected challenges with average weight against each challenging factor and Fig. 2 shows the average weightage response against each factor. We proposed a framework to mitigate the accepted challenges by consolidating the best practices identified through SLR and conducted an expert review by conducting interviews of 5 distributed scrum experts to identify the effectiveness of proposed framework. Results of expert review revealed that proposed framework will effectively contribute to sustainable development by using distributed Scrum. Fig. 3 shows our proposed framework. 7 threats to validity Although we conducted this study by following well-defined and thorough research instruments [12,13], following threats might exist to this study:
1. Articles selected for this study were searched by single researcher only, so there is a chance that we could have missed some important studies. Though, we used multiple databases and snowball sampling techniques, which reduces the possibilities of missing relevant studies. 2. We have not conducted any industry-based case study to evaluate our proposed framework. 8 conclusion and future work There is an emerging concern of using agile practices in GSD projects to get the mutual benefits of both distributive and agile methods. Scrum, as an agile most known methodology, is currently admired by many development teams. It is typically considered productive for small-scale projects with co-located teams because scrum teams are self-organized and enabled on excellent team collaboration and communication. However, GSD are usually distributed by distance differences, which results in numerous challenges or risks that might affect team collaboration and communication processes. For sustainable development and
implementation of distributed Scrum in GSD, there is a need to identify and mitigate all the confronted challenges in distributed Scrum. This study identifies challenges associated with distributed scrum development by analyzing past studies and validated by practitioners through a survey. A framework is proposed to mitigate the challenges validated by practitioners, and expert review is conducted by interviewing five distributed scrum experts to validate the proposed framework. The focus of this study was the identification of distributed scrum challenges and the proposal of a framework to mitigate the identified challenges for sustainable distributed development. An extensive systematic literature review was conducted to ensure the maximum validity of the study. Selection criteria was defined to extract the studies, and 3348 studies were extracted initially from different renowned databases. After careful review of the studies, 56 articles were selected in response to RQ1 and RQ2. By performing a critical review on the studies, 12 major challenges were identified, and out of 12 challenges, distributed scrum practitioners accepted eight challenges through the survey. This study revealed that lack of communication, coordination, and collaboration among distributed scrum teams is the most critical challenge with frequency of 91%, and it leads to many other challenges. Efforts have been made to cover the maximum number of distributed scrum challenges and mitigation strategies available in the literature to propose a framework. Our proposed framework is expected to help distributed scrum practitioners to mitigate the confronted challenges while working in distributed Scrum effectively.