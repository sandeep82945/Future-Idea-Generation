Over a couple of decades, space junk has increased rapidly, which has caused significant threats to the LEO operation satellites. A mitigating measure should be taken to protect the LEO space environment. An Active Debris Removal (ADR) concept continuously evolves for space junk removal. One of the ADR methods is Space Robotics, whose function is to chase, capture and de-orbit the space junk. This paper presents the development of an on-ground space robotics facility in the TCS Research for on-orbit refueling and debris capture experiments. A Hardware-in-Loop Simulation (HILS) system will be used for integrated system development, testing, and demonstration. HILS is the most effective and vital system to test the on-orbit docking mechanism’s reliability, usability, and safety. The HiLS test facility of TCS Research Lab will use two Universal Robot(UR)5e and UR10 manipulators in which one manipulator is attached to the robotic-RG2 gripper, and the other is attached to a force-torque sensor named Hexa-E Onrobot and with a scaled mock-up satellite model. The first UR5 manipulator will be mounted on a 7-axis linear rail and contain the docking probe. First UR5 manipulator with the suitable gripper has to interface its control boxes. The grasping algorithm was run through the ROS interface line to demonstrate and validate the On-orbit and Debris removal operation. The manipulator will be mounted with LIDAR and a Real sense camera to visualize the mock-up model, find the target model’s pose and rotational velocity estimation, and a gripper that will move relative to the target model. The other manipulator has the UR10 control, providing rotational and random motion to the mock-up satellite, enabling a dynamic simulator fed by forcetorque data. The dynamic simulator is fed up with the orbit propagator model SGP4, which will provide the orbiting environment to the target model. For the simulation of the docking and grasping of the target model, a 7-axis linear rail of a 6-meter setup is still in the procurement process. Once reaching proximity, the grasping algorithm will be launched to capture the target model after reading the random motion of the mock-up satellite model. The HILS system proposed in this paper helps develop on-orbit servicing (OOS) like repairing, upgrading, transporting, rescuing technologies, on-orbit refueling, and berthing and debris removals. introduction The growth of spacecraft launches has increased substantially over the past couple of decades, and the statistics results indicated an average of more than one hundred satellites were launched annually. Most spacecraft launches have accomplished their mission goals, but some experienced failures and irregularities.1 In the past, a launcher failure is the most typical failure of the spacecraft. However, an on-orbit failure has recently overtaken launch failures, resulting in billions of dollars lost in space organizations like NASA, ESA, ISRO, etc. Eventually, all launched satellites run out of fuel after their endof-life (EOL) span, which causes the formation of space junks/debris at different orbit regions. In recent decades, the spaces junks (residual of the spent satellite, rocket staging, body and booster, junk particles from the collision of debris objects) have increased drastically in Low Earth Orbit (LEO) region, which can cause a severe threat to the operation satellite at LEO orbit. Several works of literature have shown that servicing, like repairing, refueling, upgrading, etc., of damaged spacecraft in flight is cost-effective and extends the existing satellite’s life span. In addition, the post-mission removal of the spent satellite, rockets staging, etc., will keep the operational satellite in a favorable orbital environment for upcoming space missions. An OnOrbit Servicing (OOS) has become instrumental in increasing the life span of many satellites, thereby helping in the sustainable utilization of space orbits. Sah et. al. 1 37th Annual Small Satellite Conference
ar X
iv :2
30 6. 03 78
5v 1
[ cs
.R O
] 3
J un
2 02
3
To do the servicing of damaged spacecraft, NASA realized, as early as the 1980s, the significance of the robotics on-orbit servicing activities to protect assets in space.2 It was termed Space Robotics, which is the combination of spacecraft and robotics manipulators. Recently, Roshan et al. have developed a spacecraft with single/dual manipulators, which are termed a “Debris Chaser Satellite”345 whose primary function is to chase, capture, and de-orbit6 the space junks to a shallow earth orbit. However, the debris chaser satellite can also be used for servicing applications. Autonomous control of space robots for precise in-orbit operations (satellite servicing, active debris removal, etc.) has become critical for long-term sustainable use of the Earth’s orbits due to a multi-fold increase in space debris. However, the spacecraft-manipulator couple system produces non-linearity to space systems’ complex control problem. Manipulator motion induces reaction forces and moments on the satellite, which disturbs its position and attitude, affecting the end-effector’s pose. Therefore, the dynamic interaction between the manipulator and the base satellite must be considered while designing a control law for such space manipulators. The space robot consists of three different modes of approach;7
1. Free Flying space robot:
It refers to the class of satellite-manipulator systems wherein the cold gas thrusters/jets facilitate89 a stabilized and controlled base for robotic manipulator motion. The fixed base is favorable for trajectory formation of manipulators, however, at the expense of fuel consumption and restricted workspace. 2. Free Floating space robot:
It refers to the class of satellite-manipulator systems wherein the combined system momentum remains conserved due to the absence of an external force or torque in the terminal phase when the arm is deployed to reach the target. Only the manipulator arm motion is actively controlled in a Free Floating configuration. At the same time, the satellite base is left uncontrolled to freely translate and rotate as per the forces and moment acted upon by the arms motion. In contrast, there is no fuel consumption at all. 3. Rotation Floating Space Robot:
Rotation floating space robots10 are a comparatively newer approach wherein the base satellite attitude is controlled using actuators like reaction wheels (RW) which preserve the system’s momentum and control the manipulator’s arms. The satellite base is still left free to translate. This approach causes fuel consumption in a limited amount. These three approaches are primarily used for the manipulation in orbit for OOS applications. Ground-based experiments will be required to verify and explore the capability, feasibility, and limitations of the critical trajectory planning and control algorithm before servicing the satellite i.e., the space robot is launched for OOS missions. A ground-based experiment helps us to ensure that the space robot can successfully implement the mission tasks like orbit capturing and docking operations. Hence, setting up a suitable ground-based experiment system for a space robot performing fine manipulation becomes essential. The ground-based experiment for the evaluation of planning and control algorithms for space robots is challenging in two ways;
1. the coupled space robot system needs to be permitted to move in the 6DOF system, and
2. the effect of gravity cannot be canceled as space considers the micro-gravity environment. Over the last decade, there have been five methods to emulate the micro-gravity environment on the ground;11
1. Free fall motion or airplane flying at the stratosphere. 2. Neutral buoyancy 3. suspension system 4. air-bearing table. 5. Hybrid method. The first four methods to emulate the microgravity environment are expensive and timeconsuming. Therefore most of the space research organizing focuses on the hybrid method, which is the mathematical model combined with the mechanical model. The trajectory of the space robot in a micro-gravity environment is calculated using the gravity-based mathematical model. Then the mechanical model is forced to move according to the calculation. A precise dynamic model can emulate the behaviors of a space robot coupled system. The hybrid method is relatively cheap and can be set up using ground-based robots like UR5, UR10, and KUKA. Organizations like NASA, ESA, DLR (German Aerospace Center), Surrey Space Center, and JAXA have set up several research facilities to execute the ground-based experiment to verify the space robotics operation for OOS applications. The DLR Robotics Laboratory has set up a European Proximity Operations Simulator (EPOS), which consist of two KUKA robot in which; one is used for simulating target and the other for simulation chaser, linear rail, sun simulator, and sensors. The EPOS facility can be used to test the autonomous GNC for rendezvous and
Sah et. al. 2 37th Annual Small Satellite Conference
mission inspection12.13 Similarly, the STAR lab of the University of Surrey has developed the Orbital robotics testbed, which is used to simulate the 6DOF manipulation by using multiple robotics arms or airbearing tables. Their setup has also considered orbital disturbance and tries to grasp the 3D printed mock-up model using a range of control modes from tele-operation to full autonomy.14
In this paper, we have established on ground Hardware In Loop Simulation (HiLS) facility to explore and verify the capability of the space robot to execute fine manipulation, non-cooperative target capturing, and the end phase of docking. This HiLS facility is the first space robotics laboratory in India set up by TCS Research India and will be used for future ISRO OOS missions. Using groundbased robots, a hybrid simulation approach has been used to verify our trajectory and control algorithms. These verified algorithms can be used for upcoming missions. The rest of the paper has been organized into the following sections; Section: Hybrid Simulation Method describes the simulation and hardware concept of dynamics emulation of chaser-target motion using the Pybullet and URs manipulator. The section: Space Robotics Laboratory(SRL) explains about objective, lab layout, and the different SRL components required for on-ground experiment systems. In the section: Results and Discussion, the initial results of the Hardware-in-loop System (HiLS)of URs replicating the chaser’s and target’s motion were explained. The last section deals with the conclusion and future works that will be executed in the coming days by considering the multiple scenarios of space rendezvous and docking in a more real-time consideration. hybrid simulation method Figure 1 shows a snapshot of the PyBullet environment created to simulate the chaser-target space robot. A red target is being tracked by a Rotation Floating space robot15 with a UR5 manipulator on-board it. Three orthogonal reaction wheels are mounted on the space robot to control the attitude of the base satellite. The objective is to use a two-layered MPC-based control16 architecture that controls the motion of the satellite base and UR5 manipulator to enable it to reach the moving target. After that, the target will be grabbed using an impedance controller, followed by bringing the arm (with the target) back to the initial configuration. PyBullet simulations have been performed, and the results are shown later. An orbital environment1718
needs to be incorporated with the Pybullet environment by using STK tools which will be part of the future work. The dynamic equation of the space robot is generally expressed in the following form;[ Hb Hbm HTbm Hm ] [ ẍb Θ̈s ] + [ cb cm ] = [ Fb τm ] + [ JTb JTm ] (1)
whereas
Hb ∈ R6x6 and Hm ∈ Rnxn are the inertial matrices of the base and the manipulator’s arm;
Hbm ∈ R6xn is the couple inertial matrix; cb ∈ R6 and cm ∈ R6 are the velocity-dependent
non-linear terms for base and arm;
Fb, Fe, τm ∈ R6 are force and torques on the centroid of the base and exert on the manipulator’s hand, torque on the manipulator’s joints. ẋe = Jbẋb + JmΘ̇s (2)
Whereas, Jb and Jm are the Jacobian matrices dependent on the motion of the base and the manipulator; ẋb andẋe are the absolute velocity of the space base and end-effectors. Θs is the joint angle of the space manipulator. Since no external forces and torques are acting on the free-floating system of the space robot, the linear and angular momentum is considered zero initially. Therefore, the system momentum keeps zero according to the conservation law. The equation of such a free-floating space robot is given as
Hbẋb +HbmΘ̇s = 0 (3)
Sah et. al. 3 37th Annual Small Satellite Conference
Hence, the absolute velocity of the space robot can be solved from equation 3 as
ẋb = −H−1b HbmΘ̇s = HΘ̇s (4)
Substituting the value of the absolute velocity of space base for equation 4 to 3, the following relationship can be formed,
ẋe = (Jm − JbH−1b Hbm)Θ̇s = J ∗(Φb,Θs)Θ̇s (5)
Whereas, J∗(Φb,Θs) is the Generalized Jacobian Matrix (GJM)
And by GJM, the manipulator’s hand can be controlled by resolved motion rate or acceleration control in the inertial space. The simulations are followed by hardware experiments to validate the results obtained from PyBullet. Towards this end, a Hardware-in-the-loop-based Hybrid approach is followed, the most commonly used approach for space robots. Figure 2 shows the philosophy behind the hardware experiments. The motion of the chaser end-effector and the target is calculated concerning a frame attached to the base of the chaser satellite. The transformed 6 DOF motion is replicated on two Universal Robot arms: Chaser on a UR5 arm and target motion on the UR10 arm. The actual motion of the hardware arms is then fed back to the PyBullet environment as real-time feedback. The 6 DOF motion is transformed back into the inertial frame, which is then acted upon by the proposed controller. The cycle repeats until and unless the chaser arm (UR5) reaches the target arm (UR10). In the preliminary results, independent motions of the UR5 (chaser motion) and UR10 (target motion) were executed in sync with the PyBullet environment in real time. Both arms produced perfect results and reproduced the PyBullet results. In the future, they will be run together to complete the pipeline executed in PyBullet. space robotics lab(srl) setup The space robotics lab is developed under a cross-section area of 12.2m x 5.8m in the TCS Research Building. The concept of a space robotics lab was taken from the German Aerospace Center(DLR)19 robotics test facility where they developed European Proximity Operations Simulator.12 The main aim of the EPOS is to execute the cooperative rendezvous and docking system for Automated Transfer Vehicle (ATV) to the ISS. The EPOS test facilities consist of the test bed of two KUKA robots, 25m linear rail, sun simulation, realistic background, and HiLS setup for the execution of the end-to-end testing of rendezvous and docking. A similar concept has been used to develop our robotic space lab in TCS Research. The SRL is the first space robotics test facility in India that will be diversely working in the field of space robots. The test setup will test and validate cooperative and non-cooperative rendezvous and docking operations used in On-Orbit Servicing applications like Refueling, debris removal, maintenance, berthing, and assembly. The schematic diagram of the SRL lab is shown in figure 3. objective The main objective of the SRL system is to test and verify the On-Orbit Servicing (OOS) tasks like refueling, assembly, debris removal, and maintenance by using the space robots. The experiment system typically considers the cooperative target, like a communication satellite that needs refueled or battery replacement or maintenance, and the noncooperative target, like the spent satellite at LEO. The primary operations are near-field rendezvous, capture, fine manipulation, and docking to the target spacecraft for OOS. The main experiment which will be carried out in the robotic space lab is listed below:
1. Testing and Verification of trajectory plan and control algorithm in service-target space robots. Sah et. al. 4 37th Annual Small Satellite Conference
2. Calibration, Testing, and Validation of force torque sensor in servicer space robot. 3. Testing and Verification of guidance algorithm while executing the proximity rendezvous between space robots
4. Testing and Validation of visual servoing algorithm to track non-cooperative targets. 5. Near field rendezvous and robotic capturing of non-cooperative targets autonomously. 6. Maintenance and replacement operation of faulty spacecraft in orbit. components of srl. The space robotics lab in TCS research consists of the following components for the experiment: universal robot manipulator The universal robot manipulators set up the robotics lab’s capture and fine manipulation operation. We will be using UR5e and UR10 manipulators for our experiment; the UR5e will act as the chaser space robot and will be replicating the chaser motion, and the UR10 will act as the target space robot, which will have the 3U mockup satellite model and will be replicating target motion. The lab UR5e and UR10 manipulators are shown in Figures 4 and 5. linear rail system The 7th-axis linear rail system of 6 m in length is used to simulate the near-end rendezvous and proximity operation. A Rack and Pinion mechanism uses the servo-based control to move the URs robot in a linear direction. This linear rail system can withstand a payload of 20-30 kg with a speed of 1m/s and ± 0.1mm of positional accuracy. The schematic diagram of the linear rail system is shown in figure 6. The linear system is made of the mild-steel attached to the floor using the grouting method. In the linear rail system, the UR5e and UR10 supporting plates are there, which will help to provide linear movement to the robot. The relative velocity between the chaser and target object can be simulated using the linear rail system on a ground-based platform. Sah et. al. 5 37th Annual Small Satellite Conference robotics arm gripper The robotics gripper aims to grasp the target object at its grasping points. An Onrobot RG2 gripper is used in chaser space robots which can withstand a payload of 2kg with a stroke of 110mm. The figure of the Onrobot RG2 gripper is shown in figure 7 on the left side. This gripper has inbuilt firmware, which will be directly used by the URs manipulator end-effector and provides intelligence, fast deployment, easy customization, and programming. Similarly, an Onrobot RG2 v2 gripper is used in the UR10 robot, where the mock-up satellite will be hung. This gripper, through UR10 control, primarily provides the tumbling motion to the 3U mock-up satellite body. The image of the Onboard RG2 v2 gripper is shown on the right side of figure 7. force torque sensor A Hex-E Onrobot 6-axis force/torque sensor is used for our UR5e manipulator. It provides accurate force and torque measurement along all 6DOF and gives us precise control for assembly, debris capturing, and refueling application. This sensor includes force control, path recording, high accuracy, and special features for insertion tasks. The Hex-E’s primary function in our experiment is determining the impact force or torque acting on the chaser space robot end-effector while grasping the target object. It will help us to find the optimal impact force or torque acting on the chaser robot while docking and helps us to model the contact dynamics between the two space robot. This sensor can withstand the force of 220N and torques of 10Nm during the experimental phase. Figure 8 shows the Hex-E force-torque sensor. 3u mock-up satellite A 3U standard CubeSat platform is used to make the mock-up satellite model. An acrylic sheet is used to make the 3U satellite model, and a solar panel is attached to the topmost surface of the model. Some grasping points have been made to the mockup satellite model so that the gripper will grasp at given grasping points. The 3U satellite model is shown in figure 9. The mock-up model will be placed on the UR10 manipulator, which provides the tumbling motion. Sah et. al. 6 37th Annual Small Satellite Conference vision based camera An Intel depth camera real sense D415 is used for the vision-based guidance and pose estimation of the target body from the chaser manipulator motion. Figure 10 shows the depth camera which will be used for our HiLS experiment. This camera will be placed on the end-effector of the manipulator of the chaser. Its maximum range is approximately 10m, providing 1280 x 720 active stereo depth resolution with RGB image. An additional ZED camera is used for the motion sensing of the mock-up satellite model, which gives us 6DOF IMU for accurate motion tracking. The Zed camera used for our experiment is shown in figure 11, and it provides ultra-depth sensing mode with high-speed data transfer and improved reliability. It has a small form factor of 6.5 cm eye separation, and provides an accurate 6DOF of a tumbling mock-up model. control facility room The space robotics lab consists of a PC-based real-time facility control room where 2 PCs will be used to inspect the UR5e and UR10 robots and control their motion in a linear rail platform. Tables and chairs will organize the control facility room with LED light movement, which will help us detect the target from different angles. miscellaneous accessories The miscellaneous accessories consist of a black curtain, LED light, preparation area, window arrangement in the control facility room, wiring of 230V ac power, and GPU setup for running the hybrid experiment approach. A black curtain encloses the experiment areas to mimic the space environment. An LED light setup is made at the experiment area, where the light will illuminate the target mockup satellite to replica the Sunlight. The preparation area is mainly used for making plans and preparing the experimental procedures before performing any specified experiment. results & discussion The results section presents the complete pipeline of the workflow from the moment of the rendezvous phase of the rotation floating space robot ends. Once the target is in the workspace of the stowed manipulator arm, the Model Predictive Controller extends the arm with the gripper towards the target in the desired orientation. When this proximity operation ends, an on-off controller closes the gripper, followed by a PD controller, which brings the arm and the target to their initial orientation. preliminary hardware-in-the-loop results The hardware in the loop experiments is needed to validate the simulation results obtained from the bullet pipeline. Following the hybrid method philosophy described above, hardware experiments are independently conducted to replicate the chaser arm motion on a UR5 arm and target motion on a UR 10 arm. As explained, these motions concern a frame attached to the base satellite in the PyBullet environment. The feedback is obtained from the arms and given to the PyBullet to get the MPC command and update the system’s dynamics. Figure 12 shows the motion of the UR5 arm while replicating the chaser motion leading to the plot 13 obtained. In figure 12 a., the initial hardware motion of the UR5 manipulator is shown, which shows the deviation from the Pybullet simulation command. As the chaser motion proceeds, the UR5 starts following the trajectory similar to the Pybullet simulation, shown in figure 12b. and figure 12c. Although stage II and stage III show the difference in x,y, and z position values with the simulation results, the trajectory path remains the same. Sah et. al. 7 37th Annual Small Satellite Conference
a. Stage I
b. Stage II
c. Stage III
Figure 12 d. shows the final position of the UR5, similar to the Pybullet simulation results. It was found that the UR5 is reaching the target point similar to the Pybullet trajectory path with slight deviation caused by the time latency, hardware friction, etc. Figure 13 shows the motion of the UR5 arm replicating the chaser arm motion. Solid lines are the actual trajectories of the UR5 arm, while dotted lines are the trajectories computed by the MPC, which are given as commands to the UR5 robot. It can be seen that the chaser can follow the commanded trajectory with good precision. Figure 14 shows the motion of the UR10 arm while replicating the chaser motion leading to the plot 15 obtained. In figure 14 a., the initial hardware motion of the UR5 manipulator is shown, which shows the deviation from the Pybullet simulation command. As the target motion proceeds, the UR10 follows the trajectory similar to the Pybullet simulation, shown in figure 14 b. and figure 14 c. Although stage II and stage III show the difference in x,y, and z position values with the simulation results, the trajectory path remains the same. Sah et. al. 8 37th Annual Small Satellite Conference
a. Stage I
b. Stage II
c. Stage III
Figure 14 d. shows the final position of the UR5, similar to the Pybullet simulation results. It was found that the UR10 is reaching the target point similar to the Pybullet trajectory path with slight deviation caused by the time latency, hardware friction, etc. Similar results are obtained for the target motion using the UR10 arm. Figure 15 shows the motion of the UR10 arm (solid lines) against the motion of the target obtained from PyBullet. These motions concern an intermediate frame attached to the base satellite in PyBullet. We intend to complete the PyBullet pipeline on the hardware-in-the-loop setup for the final results. For the same, we are developing a mock satellite model to act as the target. Force and torque sensors will be applied on the walls of the UR5 (chaser gripper), and the values will be recorded. These will help us design an impedance controller for the contact dynamics. Sah et. al. 9 37th Annual Small Satellite Conference conclusion & future work The paper presents the development process of the HiLS facility setup for the space robotics application. TCS Research, India’s first space robotics laboratory, has developed the space robotics lab to execute the proximity rendezvous and docking process. Numerous objective has been set up that will be implemented in the space robotics lab. A hybrid simulation approach has been utilized to emulate the micro-gravity environment on the ground with minimum cost. This approach has been promising because free base motion will be captured in a simulation environment like Pybullet, and the manipulators will mimic the chaser’s and target’s motion in hardware. UR5e and UR10 manipulators are used to replicate the motion of the chaser and target object. A 3U CubeSat mock-up model is made, which will be mounted on UR10 and provide the tumbling motion to it. The MPC controller extends the arm with the gripper as an end effector toward the target in the desired orientation. Once reaching the proximity, an on-off controller closes the gripper, followed by a PD controller, which brings the arm and the target to their initial orientation. The paper also presents the initial results of replicating the chaser and target motion by UR5 and UR10 manipulators. The results show that the motion of the UR5 and UR10 arms against the motion of the chaser and target obtained from the Pybullets are in the same trajectory line. In the later phase of the experiment, a confirmed case of the thrust characteristics20212223 obtained from the STK simulation2425 will be incorporated into the chaser manipulator to execute the rendezvous trajectory close to the target object by using the linear rail.