Mobility-as-a-Service (MaaS) systems are two-sided markets, with two mutually exclusive sets of agents, i.e., travelers/users and operators, forming a mobility ecosystem in which multiple operators compete or cooperate to serve customers under a governing platform provider. This study proposes a MaaS platform equilibrium model based on many-to-many assignment games incorporating both fixed-route transit services and mobility-on-demand (MOD) services. The matching problem is formulated as a convex multicommodity flow network design problem under congestion (modeling the cost of accessing MOD services). The local stability conditions reflect a generalization of Wardrop’s principles that include operator decisions. Due to the presence of congestion, the problem may result in non-stable designs, and a subsidy mechanism from the platform is proposed to guarantee local stability. A new exact solution algorithm to the matching problem is proposed based on a branch and bound framework with a FrankWolfe algorithm integrated with Lagrangian relaxation and subgradient optimization, which guarantees the optimality of the matching problem but not stability. A heuristic which integrates stability conditions and subsidy design is proposed, which reaches either the optimal MaaS platform equilibrium solution with global stability, or a feasible locally stable solution that may require subsidy. For the heuristic, a worst-case bound and condition for obtaining an exact solution are both identified. Two sets of reproducible numerical experiments are conducted. The first, on a toy network, verifies the model and algorithm, and illustrates the differences between local and global stability. The second, on an expanded Sioux Falls network with 82 nodes and 748 links, derives generalizable insights about the model for coopetitive interdependencies between operators sharing the platform, handling congestion effects in MOD services, effects of local stability on investment impacts, and illustrating inequities that may arise under heterogeneous populations. 1 introduction With the development of information and communication technologies (ICT), new mobility services are emerging rapidly in recent years, such as bikeshare, micromobility, carshare, ride-hail and shared taxis, microtransit, and peer-to-peer ridesharing. Urban passenger transportation is being reshaped from a carbased paradigm to a multimodal one (Shaheen et al., 2020; Chow, 2018). The emergence of new mobility services gave rise to the concept of Mobiltiy-as-a-Service (MaaS) (Djavadian and Chow, 2017; Wong et al., 2020; Pantelidis et al., 2020), which provides mobility services through a joint digital or cyberphysical gateway that enables users to plan, book, and pay for multiple types of mobility services. Recent examples of such platforms include Moovit, Moovel, Whim, Masabi, HaCon, Cubic, FlexDanmark, MovePGH, and Cal-ITP, whose roles are not to operate mobility services but to serve as aggregators of different services (van den Berg et at., 2022; Xi et al., 2022; Zhou et al., 2022). A “platform” refers not to software, but to the broader definition of a type of “two-sided” market where buyers and sellers are simultaneously managed (Rochet and Tirole, 2006), which we adopt in this study. With more mobility providers entering the market, there’s a growing need for managing the operation
of mobility providers in MaaS platforms including Mobility-on-Demand (MOD) services that use ICTs. Existence of traditional transit and MOD providers result in MaaS ecosystems with higher levels of flexibility and volatility (Chow, 2018; Djavadian and Chow, 2017; Wong et al., 2020; Pantelidis et al., 2020), potentially generating greater social welfare (Zhou et al., 2022). MaaS platforms are two-sided markets with two mutually exclusive sets of agents, i.e., users and operators. Evaluation of MaaS platforms depends on both users’ route choices and operators’ pricing and operation decisions. The emergent platform paradigm allows for such analysis. Rasulkhani and Chow (2019) proposed a game-theoretic platform-based model of MaaS systems with
unimodal trips, where each route is operated by one operator. Pantelidis et al. (2020) proposed a many-tomany assignment game method to model MaaS systems with multimodal trips, where each route can be operated by one or more fixed-route operators. The model consists of a matching problem modeled as a multicommodity capacitated fixed-charge network design problem (MCND) (Magnanti and Wong, 1984; Gendron and Larose, 2014), minimizing the sum of travel cost and operating cost (i.e. system cost). Corresponding to that problem’s optimal solution is a set of stable outcomes that determines the requirements for different pricing mechanisms between the operators, the users, and the platform to ensure stability corresponding to the assignment. There are three unresolved problems in the earlier work. First, only fixed-route mobility providers are
modeled in the research above. MOD providers operate within and between selected service regions with a selected fleet size. Instead of hard capacities, MOD services are characterized by flow-dependent congested wait times. Second, while earlier studies do allow for elastic demand where users choose not to participate in the system, this feature was never explored in depth to understand the consequences. Third, while Sotomayor (1992) has shown that many-to-many assignment games in general exhibit nonempty stable outcome spaces, the proposed problem with MOD services has a more complex structure which makes it unclear whether the nonempty property holds. We show that empty stable outcome spaces are possible, which leads to an empty stable outcome space issue for the optimal assignment. Pantelidis et al. (2020) did not propose any solution method to solve the matching problem, much less address stability constraints. We propose new model extensions that substantially expand the applicability of the framework to
MaaS analysis and design efforts. The matching model from Pantelidis et al. (2020) is extended into a nonlinear mixed integer programming problem that considers trade-offs between congestion in MOD service, capacities in fixed-route transit, and decisions from travelers and both sets of operators. An exact solution algorithm is proposed to solve the matching problem. The algorithm has a branch and bound framework. Each branch is solved through Lagrangian relaxation and subgradient optimization with a Frank-Wolfe algorithm in each iteration. To deal with nonempty outcome spaces, we modify the algorithm into a bounded heuristic to derive solutions with guaranteed stable outcomes. Two sets of numerical experiments are conducted to verify the model, the algorithms, and evaluate their effectiveness in analyzing a range of MaaS design and analysis scenarios. The larger example is based on an expanded Sioux Falls
network with 82 nodes and 722 links that includes four fixed-route operators and three MOD operators considering overlapping service regions. The paper is structured as follows. Section 2 is the literature review. Section 3 introduces the
assignment game models. Section 4 introduces the solution algorithms. Section 5 presents two numerical examples and analyses. Section 6 presents the conclusion. 2 literature review MaaS platforms consist of three sets of decision-makers: travelers, mobility operators (which can fall into fixed-route services or MOD services), and the platform regulator. The travelers decide which multimodal paths they want to take; the operators decide which routes or zones to serve, amount of line capacity or fleet sizing, and cost transfers with travelers (e.g. fares, transfers between operating costs and user costs such as using virtual stops with increased access time and reduced routing cost); platform regulators can subsidize different operators or travelers and may have control over the design of the market. In the case of public platform regulators, decisions can further extend to design of the built environment. There are few studies that consider multiple operator settings, much less on MaaS platforms. Network
flow games (e.g. Derks & Tijs, 1985) tend to consider only noncooperative behavior between operators and ignore traveler route decisions. Generalized Stackelberg games (e.g. Zhou et al., 2005) that have upper level noncooperative games between operators and lower level user equilibrium model also only consider noncooperative decisions, assume leader-follower role between operators and travelers, and lack the platform/regulator role. Dandl et al. (2021) proposed a tri-level modeling approach considering a single operator with equilibrium determined through simulation. The leader-follower role makes less sense in MaaS if the system behaves more as a two-sided market. Other simulation-based methods also exist (Djavadian and Chow, 2017; Kucharski and Cats, 2022). Zhou et al. (2022) study the specific case of multiple MOD (ride-sourcing) providers competing for travelers which does not consider potential for collaboration in a common platform. Van den berg et al. (2022) propose models for different operating structures of MaaS but they lack network effects. Najmi et al. (2023) model the equilibrium of multimodal markets with multiple providers as a noncooperative game where every link in a road network has a cost of being served by a different mode/operator. MaaS platforms can be considered as assignment games. Operators are the “sellers”, users are the
“buyers”, and the platform can find a role in the mechanism to determine the cost allocations, depending on their business model. An assignment game (Shapley and Shubik, 1971; Roth and Sotomayer,1992) is a special case of a stable matching problem (Gale and Shapley, 2013) in which utilities are transferable between buyers and sellers, where the matching is determined such that no one has incentive to break from their match. The availability of transferable utilities results in a space of outcomes of cost transfers between parties that would be stable. The game is defined by a matching problem and its corresponding stability conditions. The matching problem determines optimal matches while the corresponding set of stable cost allocation outcomes ensure that the optimal matching is also stable. Shapley and Shubik (1971) showed for the one-to-one assignment game, the matching problem is a linear program and the stable outcome subproblem is its dual, non-empty, and corresponds to the core. Sotomayor (1992) extended the problem to the “multiple partners game”, which is a many-to-many assignment game. She showed that the set of stable outcomes for an optimal assignment is nonempty and is a lattice subset of the core (Sotomayor, 1999). The assignment game has been adapted to model transportation services as many-to-one and many-to-
many assignment games. Each operator offers a service route that can match with multiple travelers up to a capacity (Rasulkhani and Chow, 2019) while travelers can transfer between multiple operators. The option for a traveler to match with multiple operators adds a layer of cooperation into the behavioral dynamics of this setting. Pantelidis et al. (2020) proposed a many-to-many assignment game model in which each buyer group is a distinct origin-destination-path, while each operator owns one or more links in a fixed-route service network (i.e. a link represents service from one origin to a destination, not a road segment). In that model, the matching problem is expanded from the assignment model in the one-to-one case (Shapley and Shubik, 1971) into a multicommodity network design (MCND) problem where buyers/travelers decide
paths to take while sellers/operators decide which links to operate. Meanwhile, the complementary stable outcome set is expanded to account for effects of fixed costs of operating a link as well as the binding capacity effects on stability. The model from Pantelidis et al. (2020) does not recognize MOD operators and their unique
characteristics. For example, a MOD service is typically defined as a fleet operating within a service region in which a traveler engages with the system in real time. There can be congestion for users to access the service: the smaller the fleet, the longer it takes for a traveler to access the service. The earliest example models of MOD services involve taxis, using macroscopic cost functions to capture the impedances of matching passengers with drivers (Yang et al., 2000, 2002, 2010; Yang and Yang, 2011) which have been further extended to general ride-hail services (He and Shen, 2015; Zha et al., 2018; Xu et al., 2021a,b; Zhang and Nie, 2021; Correa et al., 2021; Vignon et al., 2023). Existence of a stable outcome depends on the complicated relationship between trip utility, travel cost,
operating cost, and ownership of different parts of the network. If some matching pairs do not provide enough gain to be allocated between users and operators, the users may deviate from the routes selected in optimal matching or just end up unserved. Such issues can be solved by subsidizing the unstable matching pairs. More precisely, the MaaS platform/agencies can intervene by “injecting” subsidies to the unstable matching pairs to increase their potential gain to make sure that no user deviates from the matching. Tafreshian and Masoud (2020) used a minimum subsidy problem to obtain a stable outcome for a matching with empty core in peer-to-peer ridesharing matching games, which shows that subsidization is an effective way of stabilizing matchings. The most similar prior study is Xi et al. (2022), who proposed a bilevel problem in which the lower-
level model is a two-sided market. Like our study, they make use of a branch-and-bound type algorithm and assume linear wait time functions for MOD services. There are several key differences from our work. First, their model does not consider multimodal collaboration between multiple operators to serve a single passenger; in other words, this assumption likens their model to a “transportation problem” compared to our “multicommodity flow problem” with transshipment locations. Second, their model assumes operators and platform regulators that use a specific cost allocation mechanism (NYOP auction) whereas our model is mechanism-agnostic. Third (and most importantly), their model lacks a spatial component: i.e. travelers do not have specific origins and destination; network effects capture only a wait time component that depends on all users without considering link capacities or proximity to other zones and providers. Their model can be an effective tool for high level policy decision support, but limits applicability to network analysis and design. 3 proposed maas platform assignment game model The goal of this study is to build a model that recognizes congested MOD operations so that trade-offs can be analyzed regarding routes served and capacities, service regions and fleet sizes, market entry, elastic user demand for the platform, and subsidies from the platform. The modeling framework takes the original model in Pantelidis et al. (2020) and significantly expands upon that. As the model considers both traveler assignment as well as operator design decisions and platform policies, we call this more generalized model a “MaaS Platform Assignment Game”. Consider a network managed by the MaaS platform initially defined as a directed graph 𝐺(𝑁, 𝐴) serving a set of traveler OD pairs 𝑆 traveling to/from centroids 𝑁𝑍 ⊂ 𝑁. There exists a set of fixed-route operators 𝑄𝐹 such that each operator 𝑓 ∈ 𝑄𝐹 owns one or more service links, 𝐴𝑓 ⊆ 𝐴𝐹. A node connecting two service links owned by different operators can be expanded using transfer links 𝑙 ∈ 𝐴0 owned by no operator. 𝐴0𝑓 denotes the transfer links to the services provided by operator 𝑓 ∈ 𝑄𝐹 . Each fixed-route operator 𝑓 decides whether to operate link 𝑙 ∈ 𝐴𝑓 between nodes 𝑖 and 𝑗, and at what service frequency to operate on link 𝑙 ∈ 𝐴𝑓. To model such decisions, multiple links 𝑙 ∈ 𝐴𝑖𝑗𝑓 (𝐴𝑖𝑗𝑓 ⊆ 𝐴𝑓 , 𝐴𝑓 ⊆ 𝐴𝐹) controlled by 𝑦𝑙 ∈ {0,1} are created connecting the same two nodes 𝑖 and 𝑗 to represent the frequency or line capacity options. Each parallel link 𝑙 ∈ 𝐴𝑖𝑗𝑓 connecting 𝑖, 𝑗 is associated with a capacity 𝑤𝑙, an operating cost 𝑐𝑙, and
a travel disutility 𝑡𝑙. Note that link travel disutilities here include disutilities of in-vehicle travel time and average wait time which is determined by service frequency. Parallel links with different frequencies have different travel disutilities and operating costs because increased frequency would reduce average wait time and increase operating cost. At most one of the parallel links can be chosen in each 𝐴𝑖𝑗𝑓 . In practice, additional constraints can be added to fulfill other constraints of capacity selection, for example, ensuring that the same frequency/capacity is selected for service links that belong to the same line. MOD operators operate in regions instead of lines. Service region design can be modeled as choices
of whether to provide service in a set of zones and choices of fleet size to deploy in the chosen zones. We define 𝑄𝑀 as the set of MOD operators in the MaaS platform. Alternative service zones of MOD operator 𝑓 ∈ 𝑄𝑀 are modeled as nodes using zone centroids 𝑖 ∈ 𝑁𝑓𝑧 , 𝑓 ∈ 𝑄𝑀. To represent wait/access cost of MOD services, MOD nodes are created separately from the MOD zone centroids; MOD zone centroids and fixed route links are all connected to origin-destination zone centroids through access/wait links. MOD services are provided between any pair of zones in the designed service region with a fleet size,
which can be represented as complete subgraphs connecting all served zone centroids in the service region. If different fleet size options ℎ ∈ 𝐻𝑓 are considered by an MOD operator 𝑓 for a service region, different layers of complete subgraphs connecting different layers of MOD nodes are created to represent different fleet size options, each are connected with the MOD zone centroids with MOD access links. An MOD operator 𝑓 operates with fleet size ℎ ∈ 𝐻𝑓 in a complete subgraph of nodes 𝑁𝑓ℎ connected to every other node via links 𝐴𝑓ℎ = 𝑁𝑓ℎ × 𝑁𝑓ℎ . In this case, each MOD node represents the combined choice of a zone and a fleet size as 𝑣𝑖 ∈ {0,1}, 𝑖 ∈ 𝑁𝑓ℎ. MOD access links 𝐴0𝑓ℎ connect zone centroids 𝑁𝑓𝑧 to MOD nodes 𝑁𝑓ℎ, representing a wait/access cost given fleet size ℎ ∈ 𝐻𝑓. The MOD access link set of operator 𝑓 ∈ 𝑄𝑀 is 𝐴0𝑓 = ⋃ 𝐴0𝑓ℎℎ∈𝐻𝑓 , where the MOD access link set of all MOD operators is 𝐴0𝑀 = ⋃ 𝐴0𝑓𝑓∈𝑄𝑀 . The MOD link set of MOD operator 𝑓 ∈ 𝑄𝑀 is 𝐴𝑓 = ⋃ 𝐴𝑓ℎ∈𝐻𝑓 and MOD link set of all MOD operators is 𝐴𝑀 = ⋃ 𝐴𝑓𝑓∈𝑄𝑀 . The MOD node set of MOD operator 𝑓 ∈ 𝑄𝑀 is 𝑁𝑓 = ⋃ 𝑁𝑓ℎℎ∈𝐻𝑓 . The MOD link set of all MOD operators is 𝑁𝑀 = ⋃ 𝑁𝑓𝑓∈𝑄𝑀 . A link set that consists of all links in the network is defined as 𝐴 = 𝐴𝐹 ∪ 𝐴0 ∪ 𝐴𝑀 ∪ 𝐴0𝑀 ∪ 𝐴𝐷. Fig. 1 shows how to develop the network combining different alterantive fixed-route frequency and MOD service fleet designs. If detailed demand with OD pairs of coordinates are modeled, street networks can be used to connect origins, destinations, fixed-route transit stations, and MOD service zone centroids, although computational trade-offs will need to be considered. Fig. 1 shows an example of the latter. Each user group 𝑠 ∈ 𝑆 consists of a homogeneous population of travelers 𝑑𝑠 corresponding to an OD pair, which can be further split into different classes of travelers per OD pair to model heterogeneity. Matching involves finding the link flows 𝑥𝑠𝑙 of link 𝑙 ∈ 𝐴 per user group 𝑠 ∈ 𝑆 such that travelers’ disutilities converge to a user equilibrium and operators’ costs are minimized. Travelers of user group 𝑠 ∈ 𝑆 are assumed to gain utility 𝑈𝑠 upon completing their trip. Ma et al. (2021) provides an example of calibrating these utilities from existing travel modes. To allow for users to opt out of the MaaS platform, each OD pair 𝑠 ∈ 𝑆 is connected by an uncapacitated dummy link 𝑙 ∈ 𝐴𝐷 , associated with a travel disutility 𝑡𝑠 ≤ 𝑈𝑠, 0 operating cost, and infinite capacity. Travelers using these links are assumed to be not participating in the platform, instead using external modes, a competing platform, or not traveling. If a choice model was estimated as a logit model and the respective utility functions normalized to the common currency, then the travel disutility 𝑡𝑠 can be calibrated as the logsum of these external modes’ utility functions. For MOD access links, disutilities of wait/access time are modeled differently from the fixed-route
operations. Similar to the literature on matching functions for taxi and ride-hailing services, 𝜏𝑙 is used for modeling traveler disutility as shown in Definition 1. Definition 1. The matching friction between travelers and MOD services at MOD service zones is modeled as the travel disutilities of MOD access links 𝑙 ∈ 𝐴0𝑀, representing the steady-state average access/wait times at the MOD service zones. A macroscopic disutility function 𝜏𝑙(∑ 𝑥𝑠𝑙𝑠 ; ℎ) is defined by Eq.(1). 𝜏𝑙 (∑ 𝑥𝑠𝑙 𝑠 ; ℎ) = 𝑎1 (∑ 𝑥𝑠𝑙 𝑠 )
𝑏1
ℎ𝑏2 (1)
For MOD access links, travel disutilities are nonlinear, exhibiting congestion effects due to queueing for MOD service but no capacity effects. For MOD operators, their operating costs include supporting travelers to traverse MOD links and infrastructure cost of MOD nodes. The infrastructure cost of a MOD node represents the cost of setting up a zone for service for a given fleet size ℎ (e.g. bike dock installation for bikesharing services), which is defined as a constant 𝑞𝑖 for MOD node 𝑖 ∈ 𝐴𝑀. Operating costs of links are also defined similarly from the literature as shown in Definition 2. Definition 2. Unit operating cost of MOD link 𝑙 ∈ 𝐴𝑀 between two served zones is defined as 𝑚𝑙, that is calibrated by the fleet size of the operator and other possible factors (e.g. link travel cost) as shown in Eq. (2), where 𝑎2 > 0 and 𝑏3 > 0. The parameters imply that as fleet size and demand increase, the unit operating cost increases. 𝑚𝑙 (∑ 𝑥𝑠𝑙 𝑠
; ℎ) = 𝑎2ℎ 𝑏3 (2)
Since fleet size ℎ is a constant for a MOD link 𝑙 ∈ 𝐴𝑀 given the network structure, the unit operating cost for traversing two zones is a calibrated constant that varies for different fleet sizes. Since the assignment game assumes a transferable-utility game, all utility-related parameters use a
common currency exchangeable between travelers and operators (e.g. dollars). 3.1 matching model considering fixed-route and mod operators The assignment game under these changes has the following nonlinear integer programming problem 𝐿1 in Eq. (3) as the new equilibrium matching problem. Matching problem 𝑳𝟏:
min 𝑍𝐿1 = ∑ ∑ 𝑡𝑙𝑥𝑠𝑙 𝑙∈𝐴0∪𝐴𝐹∪𝐴𝑀∪𝐴𝐷𝑠∈𝑆
+ ∑ ∫ 𝜏𝑙(𝑤; ℎ)𝑑𝑤 ∑ 𝑥𝑠𝑙𝑠∈𝑆
0𝑙∈𝐴0𝑀
+ ∑ 𝑐𝑙𝑦𝑙 𝑙∈𝐴𝐹 + ∑ ∑ 𝑚𝑙𝑥𝑠𝑙 𝑙∈𝐴𝑀𝑠∈𝑆
+ ∑ 𝑞𝑖𝑣𝑖 𝑖∈𝑁𝑀
(3a)
subject to
∑ 𝑥𝑠𝑙 𝑙∈𝐴𝑖 + − ∑ 𝑥𝑠𝑙 𝑙∈𝐴𝑖 −
= { 𝑑𝑠, 𝑖 ∈ 𝑂𝑠,
0, 𝑜𝑡ℎ𝑒𝑟𝑤𝑖𝑠𝑒, −𝑑𝑠, 𝑖 ∈ 𝐷𝑠, ∀𝑖 ∈ 𝑁, ∀𝑠 ∈ 𝑆 (3b)
∑ 𝑥𝑠𝑙 𝑠∈𝑆 ≤ 𝑤𝑙𝑦𝑙 , ∀𝑙 ∈ 𝐴𝐹 (𝜇𝑙) (3c)
∑ 𝑥𝑠𝑙 𝑠∈𝑆 ≤ ∑ 𝑑𝑠 𝑠∈𝑆
𝑣𝑖, ∀𝑖 ∈ 𝑁𝑀 , ∀𝑙 ∈ 𝐴𝑖 + (3d)
∑ 𝑦𝑙 𝑙∈𝐴𝑖𝑗𝑓 ≤ 1, ∀𝐴𝑖𝑗𝑓 ⊆ 𝐴𝐹 (3e)
𝑣𝑖 + 𝑣𝑗 ≤ 1, ∀𝑖 ∈ 𝑁𝑓ℎ , ∀𝑗 ∈ 𝑁𝑓ℎ′ , ∀(ℎ, ℎ ′) ∈ 𝐻𝑓 × 𝐻𝑓 , ℎ ≠ ℎ′, ∀𝑓 ∈ 𝑄𝑀 (3f)
𝑥𝑠𝑙 ≥ 0, ∀𝑙 ∈ 𝐴, ∀𝑠 ∈ 𝑆 (3g) 𝑦𝑙 ∈ {0,1}, ∀𝑙 ∈ 𝐴𝐹 (3h) 𝑣𝑖 ∈ {0,1}, ∀𝑖 ∈ 𝑁𝑀 (3i)
Eq. (3a) includes the term ∑ ∫ 𝜏𝑙(𝑤; ℎ)𝑑𝑤 ∑ 𝑥𝑠𝑙𝑠∈𝑆
0𝑙∈𝐴0𝑀 to capture the user equilibrium under congestion
effect for using MOD service. The objective represents selfish travelers and operators, where only travelers face congestion effects represented by Beckmann’s formulation and the operating costs are agnostic to the cost allocation mechanism. Such structure allows us to find effective exact solutions for the problem in Section 4. Eq. (3b) are the flow conservation constraints, where the set of outbound links of node 𝑖 is defined as 𝐴𝑖 +, and the set of inbound links of node 𝑖 is defined as 𝐴𝑖 −. Eq. (3c) are the capacity constraints with Lagrange multiplier 𝜇𝑙. Eq. (3d) are the MOD node controlling constraints, which ensure that flows can only exist between two MOD nodes if both nodes are opened. Only when 𝑣𝑖 = 1, can the flows on the outbound links of MOD node 𝑖 be positive. Eq. (3e) ensures that only one service frequency/capacity is chosen for each fixed-route link (𝑖, 𝑗) by operator 𝑓. Eq. (3f) ensures that only one fleet size is chosen by each MOD operator. When 𝑣𝑖 = 1, then 𝑣𝑗 = 0 for all other nodes 𝑗 owned by the same operator as 𝑖 but associated with different fleet sizes. Eqs. (3g) – (3i) are non-negativity and binary constraints. The model is a nonlinear integer program; when travel costs are constant, it simplifies to an NP-hard MCND problem (Magnanti and Wong, 1984). This belongs to the class of convex multicommodity network design problems
(Crainic and Rousseau, 1986; Paraskevopoulos et al., 2016), although those tend to consider a system optimal formulation and include both congestion and capacity effects on the same links whereas Eq. (3) does not. 3.2 corresponding stability conditions The stable outcome space corresponding to 𝐿1 is shown in Eqs. (4a) – (4f). In this study we focus on linkadditive pricing policy. We denote 𝑝𝑙 as the fare of link 𝑙 and 𝑢𝑠 as the payoff of a user on OD pair 𝑠 ∈ 𝑆. The variables 𝑥𝑙𝑠 ∗ , 𝑦𝑙 ∗, 𝑣𝑖 ∗ and 𝜇𝑙 ∗ represent the optimal flow on link 𝑙 ∈ 𝐴 on OD pair 𝑠 ∈ 𝑆 , optimal operation choice of fixed-route link 𝑙 ∈ 𝐴𝐹, optimal operation choice of MOD node 𝑙 ∈ 𝑁𝑀, and Lagrange multiplier of fixed-route link 𝑙 ∈ 𝐴𝐹 from the matching problem 𝐿1. 𝑅𝑠 ∗ is the set of optimal paths for user 𝑠 ∈ 𝑆 corresponding to the solution of Eq. (3). 𝑅𝑠 is the set of all paths connecting OD pair 𝑠 ∈ 𝑆. 𝐴𝑟 denotes the set of links that compose of one or more matched paths 𝑟 ∈ 𝑅𝑠
∗, 𝑠 ∈ 𝑆. 𝐴𝑟′ denotes the set of links that compose an unmatched path 𝑟′ ∈ 𝑅𝑠\𝑅𝑠
∗, 𝑠 ∈ 𝑆. Eqs. (4a) – (4b) represent minimum operator costs. Eq. (4c) ensures utility conservation. Eq. (4d) ensures that an outcome is locally stable, i.e. there is no incentive for a single traveler to switch to another path. ∑ 𝑝𝑙 ∑ 𝑥𝑠𝑙 ∗ 𝑠∈𝑆𝑙∈𝐴𝑓 ≥ ∑ 𝑐𝑙 ∗𝑦𝑙 ∗ 𝑙∈𝐴𝑓 , ∀𝑓 ∈ 𝑄𝐹 (4a)
∑ 𝑝𝑙 ∑ 𝑥𝑙𝑠 ∗
𝑠∈𝑆𝑙∈𝐴0𝑓
≥ ∑ ∑ 𝑚𝑙𝑥𝑠𝑙 ∗
𝑠∈𝑆𝑙∈𝐴𝑓
+ ∑ 𝑞𝑖𝑣𝑖 ∗
𝑖∈𝑁𝑓
, ∀𝑓 ∈ 𝑄𝑀 (4b)
𝑢𝑠 + ∑ 𝑝𝑙 𝑙∈𝐴𝑟 = 𝑈𝑠 − ( ∑ 𝑡𝑙 𝑙∈𝐴𝑟∩(𝐴0∩𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗
𝑠∈𝑆
; ℎ)
𝑙∈𝐴𝑟∩𝐴0𝑀
) , ∀𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆 (4c)
𝑢𝑠 + ∑ 𝑝𝑙 𝑙∈𝐴𝑟′ ≥ 𝑈𝑠
− ( ∑ (𝑡𝑙 + 𝜇𝑙 ∗ + 𝑐𝑙(1 − 𝑦𝑙 ∗))
𝑙∈𝐴𝑟′∩(𝐴0∪𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗ + 1
𝑠∈𝑆
; ℎ)
𝑙∈𝐴𝑟′∩𝐴0𝑀
+ ∑ 𝑚𝑙 𝑙∈𝐴𝑟′∩𝐴𝑀
+ ∑ 𝑞𝑖(1 − 𝑣𝑖 ∗)
𝑖∈𝑁𝑟′∩𝑁𝑀
) , ∀𝑟′ ∈ 𝑅𝑠\𝑅𝑠 ∗, 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆
(4d)
𝑢𝑠 ≥ 0, ∀𝑠 ∈ 𝑆 (4e) 𝑝𝑙 ≥ 0, ∀𝑙 ∈ 𝐴𝑟, 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆 (4f)
The passenger path flow stability condition shown in Eq. (4d) is proven to correspond to the fixed-
route operator market assignment in Pantelidis et al. (2020) under a more complex non-additive fare policy. With added MOD operators, the stability condition is trivially extended but stated formally here for sake of completeness. Proposition 1. Solution stability. An optimal solution (𝒙, 𝒚, 𝒗) to Eq. (3) is locally stable if there exists one or more solutions (𝒖, 𝒑) that satisfy Eqs. (4a) – (4f), where 𝒖 is the vector of utility transferred to travelers and 𝒑 is the utility vector normalized as the fare payment from travelers to operators. Proof. The operator cost constraints (Eq. (4a)-(4b)) and utility conservation constraints (Eq. (4c)) are
feasibility conditions. Eq. (4d) ensures the local stability of the matched paths. Pantelidis et al. (2020) shows the case for only fixed-route operators, traveler paths may switch to alternative paths. Here we follow the same logic considering two possible conditions of switching one user (local stability consideration) from the matched path to the alternative unmatched path:
Condition 1: The unmatched path is fully operated, including fixed-route links and MOD nodes and
links. In this case, similar to Pantelidis et al. (2020), if a capacitated fixed-route link 𝑙 on the unmatched path is already at capacity, switching one user in requires pushing someone else off at the capacity price 𝜇𝑙 ∗. Condition 2: The unmatched path is not fully operated. If a capacitated fixed-route link 𝑙 on the unmatched path is not operated (𝑦𝑙
∗ = 0), the switched user would have to pay for the operating cost of the link (𝑐𝑙(1 − 𝑦𝑙
∗)) in addition to travel cost. If a MOD segment of the path is not operated, the unoperated MOD segment should include one or more MOD nodes (𝑣𝑖
∗ = 0), MOD link 𝑙1, MOD access link 𝑙2, and MOD egress link 𝑙3. The switched user would have to pay for the opening cost of the unopened MOD nodes (𝑞𝑖(1 − 𝑣𝑖 ∗)), the additional cost of operating on link 𝑙1 for one more user (𝑚𝑙1), as well as the travel cost of the path. For the MOD access link 𝑙2, travel cost is changed to 𝜏𝑙2(∑ 𝑥𝑙2𝑠 ∗ + 1𝑠∈𝑆 ; ℎ) due to the switch.∎
Like Shapley and Shubik (1971) and Pantelidis et al. (2020), the proposed assignment game model is
mechanism-agnostic; it does not output a specific cost allocation but instead outputs the set of all stable outcomes corresponding to the optimal matching by identifying two extreme vertices: buyer- and selleroptimal solutions. This is not to be confused with “user equilibrium” and “social optimum” in the transportation assignment literature; in essence every outcome is a “user equilibrium” with different cost transfers (see Section 3.3). The vertices can be identified by solving 𝐿2 with either Eq. (5a) (buyer-optimal) or (5b) (seller-optimal), where all solutions in between these vertices are also stable. Stable outcome problem 𝑳𝟐: max ∑ 𝑢𝑠𝑠∈𝑆 (Buyer optimal)
or
max ∑ ∑ 𝑝𝑙 ∑ 𝑥𝑙𝑠 ∗ 𝑠∈𝑆𝑙∈𝐴0𝑓𝑓∈𝐹 (Seller optimal)
(5a)
(5b)
Subject to Eqs. (4). Note that the cost allocation constraints are path-dependent, while the flows solved from 𝐿1 are linkbased. This will be dealt with in the solution algorithm discussed in Section 4. In addition, not all links are owned by operators in the platform; these include transfer links, access/egress links to stations, and the dummy links connecting OD pairs representing options alternative to the platform. 3.3 model properties and discussion  3.3.1. instability for an optimal solution to 𝑳𝟏 While Sotomayor (1992) proved that basic many-to-many assignment games have non-empty stable outcome sets, the proposed MaaS assignment game features network effects that complicate the problem. With selfish travelers under congestion and the impact on operators, it is possible that the optimal solution to 𝐿1 may not satisfy one or more of the constraints in Eq. (4) (Lemma 1), since the travel disutility terms in the objective function of 𝐿1 (Eq. (3a)) are not cost-minimizing but reflect integrals of average cost. Lemma 1. Empty outcome space. The assignment game in 𝐿1 (Eqs. (3)) is not guaranteed to be stable, i.e. have a non-empty outcome set from Eqs. (4a) – (4f). Proof. Denote the matched but unstable path as 𝑟, and the path that users on 𝑟 have incentives to switch to as 𝑟′. The two paths connect the same OD pair. Since 𝑟 is chosen over 𝑟′ by the matching problem 𝐿1, we have Eq. (6). It means that the total cost of the flow on 𝑟 is less than the cost of allocating the flow to 𝑟′ (the part of 𝑟 shared with other matched paths still operating, and the part of 𝑟′ that is not operating starts operating). Flow on path 𝑟 is denoted as 𝑥𝑟 . Set of links on paths 𝑟 and 𝑟′ are denoted as 𝐴𝑟 and 𝐴𝑟′ , respectively. The set of operating links on 𝑟 that serves not only users on 𝑟 but also users on other matched paths is denoted as 𝐴𝑟,𝑠ℎ𝑎𝑟𝑒𝑑. Set of links not operated on the unmatched path 𝑟′ is denoted as 𝐴𝑟′,𝑛𝑜. 𝑥𝑟 ∑ 𝑡𝑙 𝑙∈𝐴𝑟 + ∑ 𝑐𝑙 𝑙∈𝐴𝑟 < 𝑥𝑟 ∑ 𝑡𝑙 𝑙∈𝐴𝑟′ + ∑ 𝑐𝑙 𝑙∈𝐴𝑟,𝑠ℎ𝑎𝑟𝑒𝑑 + ∑ 𝑐𝑙 𝑙∈𝐴𝑟′,𝑛𝑜
(6)
The condition of 𝑟 being unstable with respect to 𝑟′ is shown as Eq. (7), which is derived by solving 𝑢𝑠 from Eq. (4b) and plugging in the solved 𝑢𝑠 into Eq. (4c). ∑ 𝑡𝑙 𝑙∈𝐴𝑟 + ∑ 𝑝𝑙 𝑙∈𝐴𝑟
≥ ∑ (𝑡𝑙 + 𝜇𝑙 ∗)
𝑙∈𝐴𝑟′
+ ∑ 𝑝𝑙 𝑙∈𝐴𝑟′ + ∑ 𝑐𝑙 𝑙∈𝐴𝑟′,𝑛𝑜
(7)
Multiplying Eq. (7) by 𝑥𝑟 and combining with Eq. (6), we have Eq. (8), which is the condition of a matched path 𝑟 being unstable. 𝑥𝑟 ∑ 𝑝𝑙 𝑙∈𝐴𝑟 − ∑ 𝑐𝑙 𝑙∈𝐴𝑟
> 𝑥𝑟 ∑ 𝜇𝑙 ∗
𝑙∈𝐴𝑟′
+ 𝑥𝑟 ∑ 𝑝𝑙 𝑙∈𝐴𝑟′ − ∑ 𝑐𝑙 𝑙∈𝐴𝑟,𝑠ℎ𝑎𝑟𝑒𝑑 + (𝑥𝑟 − 1) ∑ 𝑐𝑙 𝑙∈𝐴𝑟′,𝑛𝑜
(8)
∎
Lemma 1 shows that 𝐿1 on its own may not be stable. As such, we define a more constrained version of 𝐿1 that includes a local stability guarantee, named as 𝐿1𝐶 . The optimal solution to 𝐿1𝐶 is a market equilibrium for the platform design that is guaranteed to be stable in Definition 3. Definition 3. Let 𝐿1𝐶 be the assignment game defined by 𝐿1 plus the added constraint of guaranteed local stability. The optimal solution to 𝐿1𝐶 is a MaaS platform equilibrium, where 𝑍𝐿1 ∗ ≤ 𝑍𝐿1𝐶 ∗ . No user can unilaterally switch path without being worse off, and no operator can unilaterally change their decision without being worse off for any outcome in the non-empty stable outcome set, and cooperative behavior between operators is possible in serving a user path together. An example is shown in Fig. 2. There are 2 OD pairs in the network, 1 to 3 and 1 to 2, both with 100
units of demand. Link travel costs and operating costs are labeled in Fig. 2. Links (1,3) and (2,3) are walking links without operating cost and not owned by any operator. Dummy links for the two OD pairs are drawn in yellow with dashed lines with travel costs labeled. Utility 𝑈𝑠 of the 2 OD travelers are both 25. All links have infinite capacity. The optimal matched flows solved from 𝐿1 are 200 units on link (1,2) and 100 units on link (2,3). However, the matched path for OD1, which is [1,2,3], is an unstable path, despite the equilibration in route assignment in Eq. (3a), because of the subsequent cost transfer. The lowest fare that can be set for link (1,2) is 2.4, so the total cost for one user on path [1,2,3] is 12 + 6 + 2.4 = 20.4, which is greater than the cost of walking path [1,3]. This means that the users on path [1,2,3] have incentives of switching to walking path [1,3]. The condition of Eq. (8) holds in this case (left-hand side = -240, righthand side = -480). When instability happens, flow on the unstable path have incentive to switch to unmatched paths. In
the example shown in Fig. 2, after the first user switches to walking path [1,3], the fare of link (1,2) will increase, which leads to more users switching to walking path [1,3]. The system stabilizes when all the 100 units of flow on path [1,2,3] have switched to walking path [1,3], which is the MaaS platform equilibrium. However, the equilibrium objective increases after the switch (before: 𝑍𝐿1 ∗ = 3,480; after: 𝑍𝐿1𝐶 ∗ = 3,680). The stability condition that we consider is local stability, i.e. there is no incentive for one user to switch
off his/her current path. It is possible that a locally stable outcome may not be globally stable, i.e. there could be a pair of users that may swap that would lead to a better outcome. This is similar to the difference between a “user equilibrium” and a “user optimum” in Smith (1984), where we align the local stability constraints in Eq. (4) with “user equilibrium”, but seek the “user optimum” by optimizing 𝐿1𝐶 (Proposition 2). Proposition 2. Local and global stability. A feasible solution to 𝐿1𝐶 may be locally stable without being optimal (local stability is a necessary but not sufficient condition); the optimal solution to 𝐿1𝐶 is globally stable. Proof. As proven by Proposition 1, Eqs. (4a) – (4f) ensures local stability, i.e. there is no incentive for a single traveler to switch to another path. Given only links with fixed link costs (transfer links and fixed-route links), the cost per user on
unmatched path 𝑟′ when 𝑛 users switch to unmatched path 𝑟′ is ∑ (𝑡𝑙 + 𝜇𝑙 ∗ + 𝑐𝑙(1 − 𝑦𝑙 ∗))𝑙∈𝐴𝑟′ + ∑ 𝑐𝑙(1−𝑦𝑙
∗)𝑙∈𝐴𝑟′ 𝑛 , which monotonically decreases while 𝑛 increases, indicating that more users will switch to path 𝑟′ if the path 𝑟′ is worthwhile for the first user to switch to. In this case, local stability ensures global stability. Given links with congestion effects (MOD access links), the cost per user on unmatched path 𝑟′ when
𝑛 users switch to unmatched path 𝑟′ is 𝑈𝑠 − (∑ (𝑡𝑙 + 𝜇𝑙 ∗)𝑙∈𝐴𝑟′∩(𝐴0∪𝐴𝐹∪𝐴𝐷∪𝐴𝑀) + ∑ 𝜏𝑙(∑ 𝑥𝑙𝑠 ∗ +𝑠∈𝑆𝑙∈𝐴𝑟′∩𝐴0𝑀 1 ; ℎ) + ∑ 𝑚𝑙𝑙∈𝐴𝑟′∩𝐴𝑀 + ∑ 𝑞𝑖(1−𝑣𝑖 ∗)𝑖∈𝑁𝑟′∩𝑁𝑀 +∑ 𝑐𝑙(1−𝑦𝑙 ∗)𝑙∈𝐴𝑟′∩(𝐴0∪𝐴𝐹∪𝐴𝐷∪𝐴𝑀) 𝑛 ), in which the last term decrease while 𝑛 increases, while the second term increases while 𝑛 increases. In this latter case, it is possible that the lowest payoff per user switched appears when more than one user switches to the unmatched path 𝑟′, which means that local stability does not ensure global stability when there are congestion effects. Among all the locally stable solutions, the solution with the lowest objective value (𝑍𝐿1𝐶 ∗ ) is the MaaS platform equilibrium, which is globally stable, since the lowest objective value in Eq. (3) indicates no incentives of switching in the platform. ∎ 3.3.2. unique and non-unique variables As shown in Sotomayor (1999), the many-to-many assignment game has a unique lattice structure for its stable outcome set and there exists a unique optimal stable payoff for each side of the market (buyer- and seller-optimal vertices). From the network properties, however, Pantelidis et al. (2020) also showed that certain variables are unique even if the path flows are not unique. Proposition 3. Solution uniqueness. A MaaS platform equilibrium solution under a link-additive and separable pricing scheme is unique in link flows, passenger ridership per operator, and the sum of total consumer surplus and total operator revenue. Proof. Link flows are known to be unique for multicommodity assignment models under congestion
(Sheffi, 1985). As mentioned, we consider two alternative pricing schemes: a link-based price and a nonadditive price that is paid once to an operator regardless of how many legs of the trip belong to that operator. The latter scheme was studied in Pantelidis et al. (2020). Here we study the former, which is formulated as the conditions in 𝐿2. Since flow of link 𝑙 is unique (∑ 𝑥𝑙𝑠 ∗ 𝑠∈𝑆 ), system travel cost is unique (∑ ∑ 𝑡𝑙𝑥𝑙𝑠 ∗ 𝑙∈𝐴0∪𝐴𝐹∪𝐴𝑀∪𝐴𝐷𝑠∈𝑆 + ∑ 𝜏𝑙(∑ 𝑥𝑙𝑠 ∗ 𝑠∈𝑆 ; ℎ) ∑ 𝑥𝑙𝑠 ∗ 𝑠∈𝑆𝑙∈𝐴0𝑀 ). System total trip utility is unique (∑ 𝑑𝑠𝑈𝑠𝑠∈𝑆 ). Since the sum of system travel cost, system total consumer surplus, and total operator revenue is equal to system total trip utility,
the sum of system total consumer surplus and total operator revenue is unique despite the non-uniqueness of path flows. ∎
3.3.3. Generalization of Wardrop’s principles
The assignment game stability conditions shown in Eq. (4) represent a more generalized form of the
noncooperative user equilibrium route choice behavior proposed by Wardrop (1952) with added operator considerations and cooperation for operators in serving a user path together. Corollary 1. Generalization of Wardrop’s user equilibrium. When 𝑄 = {}, i.e. there is no operator agent and the platform becomes a one-sided market, the stable outcome space defined by the constraints in Eq. (4) is determined only by 𝑢𝑠 (𝑝𝑙 ’s drop out), which leads to a generalization of the Wardrop’s user equilibrium conditions (1952) with known 𝑈𝑠 and link capacities. Proof. Without operators, Eqs. (4a) – (4b) drop out. Removing the operator terms in the stability
constraint in Eqs. (4c) – (4d) leads to Eqs. (4c’) – (4d’). 𝑢𝑠 = 𝑈𝑠 − ( ∑ 𝑡𝑙 𝑙∈𝐴𝑟∩(𝐴0∩𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗
𝑠∈𝑆
; ℎ𝑙)
𝑙∈𝐴𝑟∩𝐴0𝑀
) , ∀𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆 (4c’)
𝑢𝑠 ≥ 𝑈𝑠 − ( ∑ (𝑡𝑙 + 𝜇𝑙 ∗)
𝑙∈𝐴𝑟′∩(𝐴0∪𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗ + 1
𝑠∈𝑆
; ℎ𝑙)
𝑙∈𝐴𝑟′∩𝐴0𝑀
) , ∀𝑟′ ∈ 𝑅𝑠\𝑅𝑠 ∗, 𝑟
∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆
(4d’)
If we combine Eqs. (4c’) and (4d’) and assume that all links are uncapacitated, we have Eq. (9), which
is in fact the KKT conditions corresponding to the user equilibrium as shown in Beckmann et al. (1956). The left-hand side is the travel cost of the matched path 𝑟. The right-hand side is the cost of switching to an unmatched path 𝑟′, which is travel cost of the unmatched paths. ∑ 𝑡𝑙 𝑙∈𝐴𝑟∩(𝐴0∩𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗
𝑠∈𝑆
; ℎ)
𝑙∈𝐴𝑟∩𝐴0𝑀
≤ ∑ 𝑡𝑙 𝑙∈𝐴𝑟′∩(𝐴0∪𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗ + 1
𝑠∈𝑆
; ℎ)
𝑙∈𝐴𝑟′∩𝐴0𝑀
, ∀𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆, ∀𝑟′
∈ 𝑅𝑠\𝑅𝑠 ∗, 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆
(9)
∎ 3.4 subsidy for system stabilization The MaaS platform assignment game so far does not involve any decisions from the platform. As
solving 𝐿1 may not obtain a solution to 𝐿1𝐶, we consider subsidy decisions for the platform to guarantee local stability. We introduce the role of subsidy in stabilizing an unstable assignment as a platform design strategy first considered by Tafreshian and Masoud (2020) for ridesharing markets. When unstable paths are subsidized sufficiently to enlarge the payoff, they can still be stabilized, and the result may even outperform the solution to 𝐿1𝐶. In MaaS platforms, users pay one time for a bundle of mobility services which compose a path, so it might make sense for subsidies per user and per path. Consider a path-based subsidy 𝑎𝑟 directed to each user on path 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆, such that the travel disutility is decreased by that amount per user in Definition 4. Definition 4. 𝑳𝟏𝑺 is a variant of the 𝐿1 assignment game with the added decision variable for the platform decision-maker to provide path-based subsidies 𝑎𝑟 for path 𝑟 ∈ 𝑅𝑠
∗, 𝑠 ∈ 𝑆 such that the equilibrium objective is minimized, i.e. in Eq. (10), where 𝑥𝑟 is the flow on path 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆.
min 𝑍𝐿1𝑆 = 𝑍𝐿1 + ∑ ∑ 𝑎𝑟𝑥𝑟 𝑟∈𝑅𝑠 ∗𝑠∈𝑆
(10)
The optimal solution to 𝐿1𝑆 is called a subsidized MaaS platform equilibrium, where 𝑍𝐿1 ∗ ≤ 𝑍𝐿1𝑆 ∗ . In the example of Fig. 2, instability of path [1,2,3] happens due to larger cost per user (∑ 𝑡𝑖𝑗𝐴𝑟 + ∑ 𝑝𝑖𝑗𝐴𝑟 ) than the walking path [1,3]. Obviously, such instability can be fixed by injecting subsidies 𝑎[1,2,3] to lower the cost of the unstable path [1,2,3]. In this example, a subsidy of 𝑎[1,2,3] = 0.4 is needed for each user on path [1,2,3] to make sure that they don’t switch to walking path [1,3]. Without any intervention, the flow on [1,2,3] will switch to the walking path [1,3], leading to 𝑍𝐿1𝐶 ∗ = 3,680. With the subsidy included, the subsidized equilibrium objective is 𝑍𝐿1𝑆 ∗ = 3,480 + 40 = 3,520 , which is still lower than the equilibrium objective of 3,680. This means that subsidizing the matchings solved from 𝐿1 is worthwhile in this case. However, if the cost of link (1,3) is decreased from 20 to 18.5, the flows solved from 𝐿1 stays the same, while subsidy needed to stabilize path [1,2,3] becomes 𝑎[1,2,3] = 1.4 per user. The subsidized equilibrium objective becomes 𝑍𝐿1𝑆 ∗ = 3,620. In this case, the equilibrium objective is 𝑍𝐿1𝐶 ∗ = 3,580, which means that it is not worthwhile to inject subsidies. 𝐿1𝑆 is a highly complex problem since the objective (10) and constraints are nonconvex. We can equivalently decompose the problem into finding a solution to 𝐿1 and solving for 𝑎𝑟
∗ in 𝐿3 given the variables obtained from 𝐿1 if they are unstable, i.e. Definition 5. Definition 5. 𝑳𝟑 finds the optimum subsidies 𝑎𝑟 needed for a given solution (𝒙 ∗, 𝒚∗, 𝒗∗) with an empty outcome set such that it is no longer empty. Then 𝑍𝐿1𝑆 ∗ = min(𝑍𝐿1(𝒙 ∗, 𝒚∗, 𝒗∗) + 𝑍𝐿3|(𝒙∗,𝒚∗,𝒗∗)). Minimum Subsidy Problem 𝑳𝟑:
min 𝑎𝑟,𝑢𝑠,𝑝𝑙
𝑍𝐿3|(𝒙∗,𝒚∗,𝒗∗) = ∑ ∑ 𝑎𝑟𝑥𝑟 ∗
𝑟∈𝑅𝑠 ∗𝑠∈𝑆
(11a)
Subject to
∑ 𝑝𝑙 ∑ 𝑥𝑠𝑙 ∗ 𝑠∈𝑆𝑙∈𝐴𝑓 ≥ ∑ 𝑐𝑙 ∗𝑦𝑙 ∗ 𝑙∈𝐴𝑓 , ∀𝑓 ∈ 𝑄𝐹 (11b)
∑ 𝑝𝑙 ∑ 𝑥𝑙𝑠 ∗
𝑠∈𝑆𝑙∈𝐴0𝑓
≥ ∑ ∑ 𝑚𝑙𝑥𝑠𝑙 ∗
𝑠∈𝑆𝑙∈𝐴𝑓
+ ∑ 𝑞𝑖𝑣𝑖 ∗
𝑖∈𝑁𝑓
, ∀𝑓 ∈ 𝑄𝑀 (11c)
𝑢𝑠 + ∑ 𝑝𝑙 𝑙∈𝐴𝑟 = 𝑈𝑠 + 𝑎𝑟 − ( ∑ 𝑡𝑙 𝑙∈𝐴𝑟∩(𝐴0∩𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗
𝑠∈𝑆
; ℎ𝑙)
𝑙∈𝐴𝑟∩𝐴0𝑀
) , ∀𝑟 ∈ 𝑅𝑠 ∗, ∀𝑠
∈ 𝑆
(11d)
𝑢𝑠 + ∑ 𝑝𝑙 𝑙∈𝐴𝑟′ ≥ 𝑈𝑠
− ( ∑ (𝑡𝑙 + 𝜇𝑙 ∗ + 𝑐𝑙(1 − 𝑦𝑙 ∗))
𝑙∈𝐴𝑟′∩(𝐴0∪𝐴𝐹∪𝐴𝐷∪𝐴𝑀)
+ ∑ 𝜏𝑙 (∑ 𝑥𝑙𝑠 ∗ + 1
𝑠∈𝑆
; ℎ𝑙)
𝑙∈𝐴𝑟′∩𝐴0𝑀
+ ∑ 𝑚𝑙 𝑙∈𝐴𝑟′∩𝐴𝑀
+ ∑ 𝑞𝑖(1 − 𝑣𝑖 ∗)
𝑖∈𝑁𝑟′∩𝑁𝑀
) , ∀𝑟′
∈ 𝑅𝑠\𝑅𝑠 ∗, ∀𝑟 ∈ 𝑅𝑠 ∗, ∀𝑠 ∈ 𝑆
(11e)
𝑢𝑠 ≥ 0, ∀𝑠 ∈ 𝑆 (11f)
𝑝𝑙 ≥ 0, ∀𝑙 ∈ 𝐴𝑟, ∀𝑟 ∈ 𝑅𝑠 ∗, ∀𝑠 ∈ 𝑆 (11g)
𝑎𝑟 ≥ 0, ∀ 𝑟 ∈ 𝑅𝑠 ∗, ∀𝑠 ∈ 𝑆 (11h)
There are three sets of decision variables: user’s payoff of user group 𝑠 ∈ 𝑆 (𝑢𝑠), fare of link 𝑙 ∈ 𝐴𝑟, 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆 (𝑝𝑙), and subsidy to each user on path 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆 (𝑎𝑟). Subsidies are injected per path per user to increase trip utilities, which is reflected in the cost allocation constraints (Eq. (11d)). The objective (Eq. (11a)) is to minimize the total amount of subsidies injected. Since subsidy is injected per path per user, path flows are needed for total subsidies in Eq. (11a). 4 proposed solution algorithms The challenge is in solving for a MaaS platform equilibrium with guaranteed local stability, with or without subsidy. We propose a branch and bound algorithm that can obtain the exact solution to the many-to-many matching model 𝐿1 in Section 4.1, but stability is not guaranteed per Lemma 1. For obtaining a solution with guaranteed stability, i.e. the MaaS platform equilibrium, we integrate 𝐿2 and 𝐿3 as shown in Section 4.2. 4.1. exact solution method to the many-to-many matching model 𝑳𝟏 The algorithm is composed of 3 parts nested within each other: branch and bound (Land and Doig, 2010), Lagrangian relaxation with subgradient optimization, and Frank-Wolfe algorithm. An overview of the complete algorithm is presented in Fig. 3 (which also contains parts introduced in 4.2). The integral constraints of 𝑦𝑖𝑗 and 𝑣𝑖ℎ are relaxed in the branch and bound. At each branch, a nonlinear traffic assignment problem with capacity (Eq. (3c)) and MOD node controlling constraints (Eq. (3d)) is solved. The capacity constraints of fixed-route links are removed using a Lagrangian relaxation approach (Algorithm 2). The resulting non-linear traffic assignment problem is solved with a Frank-Wolfe algorithm (Algorithm 3). Feasibility of the original problem in each branch involves checking the binary constraints. 4.1.1. branch and bound algorithm For each branch, the set of 𝑦𝑙 (𝑣𝑖) constrained to be 0 forms set 𝑌0 (𝑉0), the set of 𝑦𝑙 (𝑣𝑖) constrained to be 1 forms set 𝑌1 (𝑉1). For each branch, we do the following modification to the network to make sure that constraints (3c) and (3e) are met. • For 𝑦𝑙 ∈ 𝑌0, the corresponding link 𝑙 is removed from the network for this branch. • For 𝑦𝑙 ∈ 𝑌1, all the other links connecting the same nodes owned by the same operator to represent
different service frequency options are removed from the network for this branch. • For 𝑣𝑖 ∈ 𝑉0, all the links incident on MOD node 𝑖 are removed for this branch. • For 𝑣𝑖 ∈ 𝑉1, all the MOD nodes owned by the same operator with a fleet size different from the fleet size associated with node 𝑖 should be added to 𝑉0. We denote the integral-relaxed 𝐿1 of a branch as 𝐵(𝑌1 ,𝑌0 ,𝑉1 ,𝑉0) . Following the framework of a conventional Branch and Bound algorithm, each 𝐵(𝑌1,𝑌0,𝑉1,𝑉0) is solved with Algorithm 1. The solution of 𝐵(𝑌1,𝑌0,𝑉1,𝑉0) includes ?̂?𝑅, ?̂?𝐿, ?̂?, ?̂?, ?̂?𝐿1 , 𝑎𝑛𝑑 ?̂?, which denote a vector of path flows on matched paths 𝑟 ∈ 𝑅𝑠 ∗, 𝑠 ∈ 𝑆, a vector of link flows on all links 𝑙 ∈ 𝐴, a vector of values of 𝑦𝑙 of fixed-route links 𝑙 ∈ 𝐴𝐹, a vector of values of 𝑣𝑖 of MOD nodes 𝑖 ∈ 𝑁𝑀 , objective function value, and a vector of Lagrange multipliers of the capacity constraints of fixed links 𝑙 ∈ 𝐴𝐹. We denote the solution set which includes all solution variable of a branch as ?̂? = [?̂?𝑅, ?̂?𝐿 , ?̂?, ?̂?, ?̂?𝐿1 , ?̂?, 𝑌1, 𝑌0, 𝑉1, 𝑉0]. For finding a solution to 𝐿1, the algorithm stops when all branches are closed. A gap between the upper bound and lower bound can be monitored in cases where the maximum run time is exceeded. 4.1.2. lagrangian relaxation To handle the capacity constraints for the fixed-route links, we adopt the Lagrangian relaxation method
from Crainic et al. (2001), which is designed to work with branch and bound algorithms. To improve
accuracy, a redundant set of constraints Eq. (12) is added, where 𝑏𝑠𝑙 = min{𝑑𝑠, 𝑤𝑠𝑙}. This set of constraints is named as the strong forcing constraints, with Lagrange multipliers of 𝛽𝑠𝑙. 𝑥𝑠𝑙 ≤ 𝑏𝑠𝑙𝑦𝑙 , ∀𝑙 ∈ 𝐴𝐹 , ∀𝑠 ∈ 𝑆 (𝛽𝑠𝑙) (12)
The strong forcing constraints (12) can be relaxed in a Lagrangian way. The capacity constraints in
Eq. (3c) are replaced by Eq. (13) with a Lagrange multiplier of 𝛾𝑙 . With the replacement, 𝑦𝑙 can be computed as Eq. (14), where 𝑐𝑙(𝛽) = 𝑐𝑙 − ∑ 𝑏𝑠𝑙𝛽𝑠𝑙𝑠 . ∑ 𝑥𝑠𝑙 𝑠∈𝑆 ≤ 𝑤𝑙 , ∀𝑙 ∈ 𝐴𝐹 (𝛾𝑙) (13)
𝑦𝑙 = { ∑ 𝑥𝑠𝑙𝑠∈𝑆 𝑤𝑠𝑙 ⁄ , if 𝑐𝑙(𝛽) ≥ 0
1, otherwise (14)
We relax Eq. (3d) similarly as relaxing Eq. (3c). First, a redundant set of constraints is added as Eq. (15) with Lagrange multipliers 𝜂𝑠𝑙. 𝐴𝑖 + are the outbound links of MOD node 𝑖, which include MOD links and MOD egress links. 𝑥𝑠𝑙 ≤ 𝑑𝑠𝑣𝑖 , ∀𝑖 ∈ 𝑁𝑀 , 𝑙 ∈ 𝐴𝑖 +, 𝑠 ∈ 𝑆 (𝜂𝑠𝑙) (15)
Then Eq. (15) are relaxed in a Lagrangian way. The node controlling constraints in Eq. (3d) are
replaced by Eq. (16) with Lagrange multipliers 𝜆𝑙. With the replacement, 𝑣𝑖 can be computed as Eq. (17), where 𝑞𝑖(𝜂) = 𝑞𝑖 − ∑ 𝑑𝑠 ∑ 𝜂𝑠𝑙∀𝑙∈𝐴𝑖 +𝑠∈𝑆 . ∑ 𝑥𝑠𝑙 𝑠∈𝑆 ≤ ∑ 𝑑𝑠 𝑠∈𝑆
, ∀𝑖 ∈ 𝑁𝑀 , 𝑙 ∈ 𝐴𝑖 + (𝜆𝑙) (16)
𝑣𝑖 = { ∑ 𝑥𝑠𝑙𝑠∈𝑆 ∑ 𝑑𝑠𝑠∈𝑆 ⁄ , 𝑖𝑓 𝑞𝑖(𝜂) ≥ 0
1, 𝑜𝑡ℎ𝑒𝑟𝑤𝑖𝑠𝑒 (17)
The relaxed objective function is shown in Eq. (18). The relaxation of Eq. (3d) leads to cost changes
of MOD node outbound links, including MOD links (𝐴𝑀) and MOD egress links. MOD egress links are denoted as 𝑙 ∈ 𝐴𝐸. 𝑍𝐿1(𝜸, 𝜷, 𝝀, 𝜼) = ∑ ∑ 𝑡𝑙𝑥𝑠𝑙 𝑙∈𝐴0∪𝐴𝐷𝑠∈𝑆
+ ∑ ∑ (𝑡𝑙 + 𝛾𝑙 + 𝑐𝑙(𝛽)
+
𝑤𝑙 ⁄ + 𝛽𝑠𝑙) 𝑥𝑠𝑙
𝑙∈𝐴𝐹𝑠∈𝑆
+ ∑ ∑ (𝑡𝑙 + 𝑚𝑙 + 𝜆𝑙 + 𝑞𝑖(𝜂)
+
∑ 𝑑𝑠𝑠∈𝑆 ⁄ + 𝜂𝑠𝑙)𝑥𝑠𝑙
𝑙∈𝐴𝑀𝑠∈𝑆
+ ∑ ∑ (𝜆𝑙 + 𝑞𝑖(𝜂)
+
∑ 𝑑𝑠𝑠∈𝑆 ⁄ + 𝜂𝑠𝑙)𝑥𝑠𝑙
𝑙∈𝐴𝐸𝑠∈𝑆
+ ∑ ∫ 𝜏𝑙(𝑤; ℎ)𝑑𝑤 ∑ 𝑥𝑠𝑙𝑠∈𝑆
0𝑙∈𝐴0𝑀
+ 𝑐𝑜𝑛𝑠𝑡𝑎𝑛𝑡𝑠
(18)
In subgradient optimization, the Lagrange multipliers are updated from 0 when the corresponding
constraints are broken. However, constraints Eqs. (15) – (16) will never be broken after removing 𝑣𝑖. Hence, (𝜆𝑙 + 𝑞𝑖(𝜂) +
∑ 𝑑𝑠𝑠∈𝑆 ⁄ + 𝜂𝑠𝑙) will always be 𝑞𝑖 ∑ 𝑑𝑠𝑠∈𝑆 ⁄ for all concerned MOD and MOD egress links,
which means that the relaxed objective can be rewritten as 𝐿1 ′ in Eq. (19). 𝑍𝐿1′ (𝜸, 𝜷) = ∑ ∑ 𝑡𝑙𝑥𝑠𝑙 𝑙∈𝐴0∪𝐴𝐷𝑠∈𝑆
+ ∑ ∑ (𝑡𝑙 + 𝛾𝑙 + 𝑐𝑙(𝛽)
+
𝑤𝑙 ⁄ + 𝛽𝑠𝑙) 𝑥𝑠𝑙
𝑙∈𝐴𝐹𝑠∈𝑆
+ ∑ ∑ (𝑡𝑙 + 𝑚𝑙 + 𝑞𝑖
∑ 𝑑𝑠𝑠∈𝑆 ⁄ )𝑥𝑠𝑙
𝑙∈𝐴𝑀𝑠∈𝑆
+ ∑ ∑ 𝑞𝑖𝑥𝑠𝑙
∑ 𝑑𝑠𝑠∈𝑆 𝑙∈𝐴𝐸𝑠∈𝑆
+ ∑ ∫ 𝜏𝑙(𝑤; ℎ)𝑑𝑤 ∑ 𝑥𝑠𝑙𝑠∈𝑆
0𝑙∈𝐴0𝑀
+ 𝑐𝑜𝑛𝑠𝑡𝑎𝑛𝑡𝑠
(19)
Subgradient optimization of estimating Lagrange multipliers 𝛾𝑙 and 𝛽𝑠𝑙 are shown in Algorithm 1. Algorithm 1 is stopped when the change of the Lagrange multipliers is small enough, i.e. when the L2 norm of change of the vector [𝜸, 𝜷] between 2 consecutive iterations is smaller than a pre-set tolerance 𝜖. Algorithm 1. Subgradient optimization for each branch. Initialize path sets ?̂?𝑠 = [ ] for all OD pairs 𝑠 ∈ 𝑆. ?̂? = [?̂?𝑠, ∀𝑠 ∈ 𝑆]. Initialize Lagrange multipliers 𝛾𝑙 = 0, ∀𝑙 ∈ 𝐴𝐹 and 𝛽𝑠𝑙 = 0, ∀𝑙 ∈ 𝐴𝐹, ∀𝑠 ∈ 𝑆 While the L2 norm of the change of [𝜸, 𝜷] between 2 consecutive iterations > tolerance 𝜖:
Step size  = 1/iteration number. Solve 𝐿1 ′ using Algorithm 2 with 𝛾𝑙 and 𝛽𝑠𝑙, obtaining link flows 𝐹𝑋 and updated path set ?̂?. Update 𝛾𝑙 with 𝐹𝑋: 𝛾𝑙 = max {0, 𝛾𝑙 + 𝜃(∑ 𝑥𝑠𝑙 ∗
𝑠∈𝑆 − 𝑤𝑙)}. Update 𝛽𝑠𝑙 with 𝐹𝑋: 𝛽𝑠𝑙 = max {0, 𝛽𝑠𝑙 + 𝜃(𝑥𝑠𝑙
∗ − 𝑏𝑠𝑙)}. Return ?̂?, 𝐹𝑋 , 𝜸, 𝜷 4.1.3. modified frank-wolfe algorithm After relaxing capacity and MOD node controlling constraints with Lagrange relaxation, 𝐿1 is reduced to a traffic assignment problem with congestion effects on MOD access links (𝐿1 ′ ), which can be solved with a Frank-Wolfe algorithm (Frank and Wolfe, 1956; LeBlanc et al., 1975) shown in Algorithm 2. The algorithm is stopped when 𝛼 is smaller than a tolerance 𝜀 for 𝐶 consecutive iterations, where 𝐶 and 𝜀 are pre-set parameters. Algorithm 2. Modified Frank-Wolfe algorithm for solving 𝐿1
′ . Initialize current link flow set 𝐹𝑋: demand of each OD pair all assigned to dummy links. Count = 0. For each OD pair 𝑠 ∈ 𝑆:
Compute link costs of fixed-route links with 𝜸, 𝜷: 𝑡𝑠𝑙 ′ = 𝑡𝑙 + 𝛾𝑙 +
𝑐𝑙(𝛽) +
𝑤𝑙 ⁄ + 𝛽𝑠𝑙. Compute link costs of MOD links: 𝑡𝑠𝑙 ′ = 𝑡𝑙 + 𝑚𝑙 + 𝑞𝑖 ∑ 𝑑𝑠𝑠∈𝑆 ⁄ . Compute link costs of MOD egress links: 𝑡𝑠𝑙 ′ =
𝑞𝑖 ∑ 𝑑𝑠𝑠∈𝑆 ⁄ . Compute link costs of MOD access links with current link flows: 𝑡𝑠𝑙 ′ = 𝜏𝑙(∑ 𝑥𝑠𝑙 ∗ 𝑠∈𝑆 ; ℎ). (Cost of transfer links and walking links are the same as original.) While Count < 𝐶: Find the shortest path of each OD pair 𝑠 ∈ 𝑆, save the paths found to path sets ?̂?𝑠, 𝑠 ∈ 𝑆. Assign all demand each OD pair to the shortest paths. Aggregate assigned path flows to obtain auxiliary link flows 𝐹𝑌. Compute the derivative of Eq. (19) with respect to the vector of 𝑥𝑠𝑙 : 𝑑𝑂(𝛾,𝛽)
𝑑𝑥 (𝑥). Solve 𝑑𝑂(𝛾,𝛽)
𝑑𝑥 (𝐹𝑋 + 𝛼(𝐹𝑌 − 𝐹𝑋)) for 𝛼.
Update 𝐹𝑋: 𝐹𝑋 = 𝐹𝑋 + 𝛼(𝐹𝑌 − 𝐹𝑋). If 𝛼 < tolerance 𝜀:
Count = Count + 1. Else:
Count = 0
Return 𝐹𝑋, ?̂?. For each branch 𝐵(𝑌1,𝑌0,𝑉1,𝑉0), Algorithm 1 obtains the Lagrange multipliers, but not the flows (?̂?𝑅, ?̂?𝐿) directly. Path flows ?̂?𝑅 need to be obtained with a linear programming assigning demand to the paths in the path set ?̂? = [?̂?𝑠, ∀𝑠 ∈ 𝑆] iteratively updated by Algorithm 2. Path flow solution ?̂?𝑅 of the branch 𝐵(𝑌1,𝑌0,𝑉1,𝑉0) can be obtained by solving a linear program minimizing system total adjusted travel cost, where adjusted link costs are the coefficients in Eq. (19). Flows of the MOD links should be the same as the MOD flows output from the final iteration of subgradient optimization, which can be formulated as
equality constraints. OD demand is also formulated as equality constraints. Link flows ?̂?𝐿 can be obtained after having ?̂?𝑅. Then ?̂? and ?̂? can be obtained using Eq. (14) and Eq. (17). With ?̂?𝐿 , ?̂? and ?̂? known, the corresponding equilibrium objective value ?̂?𝐿1 can be computed using Eq. (3a). Proposition 4. Exact solution algorithm for 𝐿1. The proposed branch and bound algorithm with branching shown in Fig. 3 is an exact algorithm for finding an optimal solution to 𝐿1. Proof. The branch and bound relaxes the integral constraints of variables 𝑦𝑙 and 𝑣𝑖 . Only branches whose solution satisfies the integral constraints are considered feasible. These feasible solutions are used in updates of the upper bound. Since the nonlinear program after relaxing the set of binary variables is convex and the combinations of binary variables are finite, the Lagrange relaxation and Frank-Wolfe portions will converge to exact upper bounds. ∎ 4.2. bounded heuristic for a locally stable solution Due to Lemma 1, finding a MaaS platform equilibrium requires finding a stable solution (i.e. solving 𝐿1𝐶). We propose integrating 𝐿2 and 𝐿3 into the exact solution algorithm above that guarantees a locally stable MaaS platform equilibrium that may require subsidy as shown in Fig. 3 with the “Stability and Pricing” component. Proposition 5. The proposed heuristic in Fig. 3 guarantees a locally stable solution that may or may not require subsidy. Proof. A stable integral solution found using 𝐿2 without subsidy means that a locally stable solution (?̃?𝐿1𝐶) is found, where ?̃?𝐿1𝐶 ≥ 𝑍𝐿1𝐶 ∗ . The globally stable MaaS platform equilibrium (𝑍𝐿1𝐶 ∗ ) is not ensured to be found. The solution to 𝐿1𝐶 may be prematurely pruned in the branch and bound process if the solution is under an integral branch for 𝐿1. However, if the optimal solution of 𝐿1 is also locally stable, it is ensured as the MaaS platform equilibrium since no stable solution with lower objective value exists. In the same manner, the optimal 𝑍𝐿1𝑆 ∗ may be prematurely pruned, but when all branches are closed
we are guaranteed to have a feasible solution to a subsidized MaaS platform equilibrium. We denote this solution as ?̃?𝐿1𝑆, where ?̃?𝐿1𝑆 ≥ 𝑍𝐿1𝑆 ∗ . In other words, the algorithm in Fig. 3 is guaranteed to obtain either ?̃?𝐿1𝑆 (requiring subsidy) or ?̃?𝐿1𝐶 (not requiring subsidy), whichever performs better. ∎
Two sets of constraints are relaxed in the branch and bound: the integral constraints of 𝑦𝑙 and 𝑣𝑖, and stability constraints. Algorithm 3 shows the process of solving one branch of branch and bound integrating 𝐿2 and 𝐿3. We denote the integral-stability-relaxed problem of a branch as 𝐵(𝑌1,𝑌0,𝑉1,𝑉0), which can be solved with Algorithm 1. When an integral solution is found after solving 𝐵(𝑌1,𝑌0,𝑉1,𝑉0), we solve the cost allocation problem (𝐿2) for the corresponding matching. If 𝐿2 is feasible, the stable outcome space is nonempty. With a non-empty stable outcome space and an 𝐿1 objective value lower than the lowest subsidized objective value found yet, the upper bound is updated and a locally stable solution without subsidy (?̃?𝐿1𝐶) is found. If an empty stable outcome space is reached, we solve the minimum subsidy problem (𝐿3) to find the subsidized objective value (𝑍𝐿1𝑆). If the subsidized objective value is lower than the lowest subsidized
objective value found yet, the upper bound needs updating. The complete heuristic for 𝐿1𝑆 is shown in Fig. 3. When all branches are pruned, the current upper bound (and corresponding stable outcome space) is output as ?̃?𝐿1𝑆. Algorithm 3. One branch of branch and bound for bounded heuristic. Inputs: sets of integer variables constrained to be 1 and 0: 𝑌1, 𝑌0, 𝑉1, 𝑉0; solution of the branch with an integral solution and the lowest subsidized objective value found yet: ?̃?𝐿 , ?̃?𝑅, ?̃?, ?̃?, ?̃?, 𝑈, ?̃?, ?̃?, 𝑍𝐿1𝑆, ℚ. Solve 𝐵(𝑌1,𝑌0,𝑉1,𝑉0) with Algorithm 1 to obtain ?̂? = [?̂?𝑅, ?̂?𝐿 , ?̂?, ?̂?, ?̂?𝐿1 , ?̂?, 𝑌1, 𝑌0, 𝑉1, 𝑉0]. If ?̂?, ?̂? are all integers: Solve 𝐿2(?̂?) to obtain 𝑈, ?̂?. If 𝐿2(?̂?) is feasible: ?̂? = []. ?̂?𝐿1𝑆 = ?̂?𝐿1 . # A locally stable solution found Add ?̂? to the set of locally stable solutions. Else:
Solve 𝐿3(?̂?) to obtain ?̂?. Total subsidy is ?̂?𝑅?̂?. Solve 𝐿2 ′ (?̂?, ?̂?) to obtain ?̂?, ?̂?. ?̂?𝐿1𝑆 = ?̂?𝐿1 + ?̂?𝑅?̂?. If ?̂?𝐿1𝑆 < 𝑍𝐿1𝑆:
?̃?𝑅 = ?̂?𝑅 , ?̃?𝐿 = ?̂?𝐿 , ?̃? = ?̂?, ?̃? = ?̂?, 𝑍𝐿1𝑆 = ?̂?𝐿1 , ?̃? = ?̂?, 𝑈 = ?̂?, ?̃? = ?̂?, ?̃? = ?̂?. Else:
If ?̂?𝐿1 < 𝑍𝐿1𝑆:
Append ?̂? to ℚ. Return ?̃?𝐿 , ?̃?𝑅 , ?̃?, ?̃?, ?̃?, 𝑈, ?̃?, ?̃?, 𝑍𝐿1𝑆, ℚ, the set of locally stable solutions. # Updated current best Subsidized MaaS platform equilibrium
We denote a cost allocation problem given an integral solution ?̂? of 𝐵(𝑌1,𝑌0,𝑉1,𝑉0) as 𝐿2(?̂?). The solution of 𝐿2(?̂?) includes ?̂? and ?̂? (buyer optimal or seller optimal or both), which denote a vector of users’ payoffs of users 𝑠 ∈ 𝑆 and a vector of link fares of matched links 𝑙 ∈ 𝐴𝑟 , 𝑟 ∈ 𝑅𝑠
∗, 𝑠 ∈ 𝑆. We denote a subsidy problem given an integral solution ?̂? of 𝐵(𝑌1,𝑌0,𝑉1,𝑉0) as 𝐿3(?̂?). The solution of 𝐿3 is ?̂?, which denotes a vector of optimal subsidies on matched paths 𝑟 ∈ 𝑅𝑠
∗, 𝑠 ∈ 𝑆. We denote the cost allocation with the solved subsidies as 𝐿′2(?̂?, ?̂?). Solution of 𝐿2
′ also includes ?̂? and ?̂?. We show that the solution has a worst-case bound defined by the subsidized equilibrium objective of
the matching solution for 𝐿1 (Corollary 2). Corollary 2. Worst-case bound. The heuristic for 𝐿1𝑆 in Fig. 3 has an objective value ?̃?𝐿1𝑆 bounded from above, i.e. ?̃?𝐿1𝑆 ≤ 𝑍𝐿1 ∗ (𝒙, 𝒚, 𝒗) + 𝑍𝐿3|(𝒙,𝒚,𝒗) ∗ . Proof. The bound used in the heuristic for 𝐿1𝑆 (𝑍𝐿1(𝒙, 𝒚, 𝒗) + 𝑍𝐿3|(𝒙,𝒚,𝒗)) is greater than or equal to
the bound used in the exact algorithm for 𝐿1 (𝑍𝐿1(𝒙, 𝒚, 𝒗)). The larger bound still ensures that the optimal solution of 𝐿1 is found in the branch and bound algorithm. Hence the final solution ?̃?𝐿1𝑆 found by the heuristic is ensured to have a subsidized objective value smaller than the optimal solution of 𝐿1, i.e. ?̃?𝐿1𝑆 ≤ 𝑍𝐿1 ∗ (𝒙, 𝒚, 𝒗) + 𝑍𝐿3|(𝒙,𝒚,𝒗) ∗ . ∎
The difference between the exact solution to 𝐿1 and the heuristic for 𝐿1𝑆 is the upper bound used in the branch and bound. The difference between the upper bounds is the subsidy. If all the integral solutions in the branch and bound algorithm are stable without subsidy (non-empty), the upper bound used in the heuristic is identical to the exact solution to 𝐿1, indicating that the final solution found is also the optimal solution to 𝐿1 and the MaaS platform equilibrium (𝑍𝐿1𝐶 ∗ ) (Corollary 3). Corollary 3. Optimal condition. The heuristic for 𝐿1𝑆 in Fig. 3 leads to the optimal solution to 𝐿1 and the MaaS platform equilibrium (𝑍𝐿1 ∗ = 𝑍𝐿1𝐶 ∗ ) if all the integral solutions found by the branch and bound are stable without subsidy (non-empty). Proof. The bound used in the heuristic for 𝐿1𝑆 (𝑍𝐿1(𝒙, 𝒚, 𝒗) + 𝑍𝐿3|(𝒙,𝒚,𝒗)) is greater than or equal to
the upper bound used in the exact algorithm for 𝐿1 (𝑍𝐿1(𝒙, 𝒚, 𝒗)) due to the subsidy injected to unstable integer solutions. When all the integer solutions found by the branch and bound are stable without subsidy (non-empty), the upper bound used by the heuristic for 𝐿1𝑆 is the same as the exact solution algorithm for 𝐿1. In this case, the solution found by the heuristic is also the optimal solution to 𝐿1. Since the optimal solution to 𝐿1 is also stable without subsidy, there is no other stable solution with a lower objective value, indicating that the optimal solution to 𝐿1 is also the MaaS platform equilibrium (𝑍𝐿1 ∗ = 𝑍𝐿1𝐶 ∗ ). 5 numerical experiments Two sets of computational experiments are conducted to illustrate the heuristic of finding a guaranteed locally stable solution (a solution to 𝐿1𝑆 or 𝐿1𝐶). The first is used to verify the methodology and illustrate the differences between locally and globally stable solutions. The second, tested on an expanded version of Sioux Falls, illustrates generalizable insights that can be gained from the use of this model. 5.1 small illustrative case We use a toy network shown in Fig. 4 to illustrate how the method works. The original network is shown in Fig. 4(a). All costs are in dollars ($). The solid links represent the fixed-route services, links with the same color are operated by the same operator. Link (21,22) and (21,23) are transfer links between lines, which are without capacity and operating cost with no owners. There are 3 MOD operators (blue, green, brown). The circles represent the service zones that MOD operators can choose from to operate (blue: A,B,C; green: B,C; brown: B,D). Zone A covers transit station node 1. Zone B covers transit station nodes 21,22,23. Zone C covers transit station node 3. Zone D covers transit station node 4. The network is expanded into Fig. 4(b) by creating complete subgraphs for each MOD operator and
adding MOD access links and egress links. Travel cost, operating cost, and capacities are labelled as shown in the legend. The access/wait cost functions of all the MOD operators on all MOD access links 𝑙 are 𝜏𝑙(∑ 𝑥𝑠𝑙𝑠∈𝑆 ; ℎ) = ℎ −2 ∑ 𝑥𝑠𝑙𝑠∈𝑆 . The MOD operating cost parameter of all the MOD operators at all MOD nodes is 𝑚𝑙 = 2ℎ −2. Fleet size choices of all MOD operators are 1, 2, and 3. The network is further expanded to Fig. 4(c) to represent the 3 fleet size options. Infrastructure cost of MOD nodes 7, 8, 9, 10, 11, 12, and 13 are 3, 3, 2, 2, 1, 1, and 3, respectively for all fleet size options. Demand is 1,000 from node 1 to 3, and 500 from node 1 to 4. Trip utility 𝑈𝑠 is $9.50 for both OD pairs. The tolerance 𝜖 for subgradient optimization is 0.05. The tolerance 𝜀 of Frank-Wolfe is 0.01 and the required consecutive number of iterations meeting the tolerance is 5. The branch and bound algorithm is coded in Python 3.8.5. It converged after running 50 branches in
4h 51min using a laptop with 2.3 GHz Quad-Core Intel Core i7. Three locally stable solutions are found, all without subsidy. The objective values of the 3 solutions are 𝑍𝐿1𝐶,1 = 11,850, 𝑍𝐿1𝐶,2 = 11,849.875, and 𝑍𝐿1𝐶,3 = 11,850.256 Since 𝑍𝐿1𝐶,2 = 𝑍𝐿1 ∗ , the second solution is the globally stable MaaS platform equilibrium (𝑍𝐿1 ∗ = 𝑍𝐿1𝐶 ∗ = 𝑍𝐿1𝐶,2). Flows and corresponding fares of the solution are shown in Fig. 5. In the MaaS platform equilibrium shown in Fig. 5, fixed-route Operators 2, 4, and 6, and MOD
Operators 8, 9, do not enter this market. There are travelers choosing not to use the platform (300 on dummy link from (1,4)), and travelers using one of the three MOD operators (Operator 7) with a flow of 3.5 travelers. Operators 1 and 3 cooperate to serve 200 travelers. Operator 1 is required to offer free operation on link (1,21) while Operator 3 has flexibility to adjust their fare between $1 (buyer-optimal) and $4.5 (selleroptimal) for link (23,4). Operator 7 chooses to operate with a fleet size 1 instead of 2 or 3. The fare of link
(7,13) for the MOD service between (A,C) ranges from $3.71 (buyer-optimal) to $4.50 (seller-optimal). The relatively high cost captures the congestion effect limiting further patronage. Operator revenues under seller-optimal and buyer-optimal allocations are shown in Table 1. The users and operators do not have incentive to unilaterally switch. However, if two users on path [1,3] switch together to path [1,7,13,3], payoff per user becomes 𝑈1 − (𝜏(1,7) + 𝑡(7,13) + 𝑡(13,3)) − 𝑞7+𝑞13
2 −
𝑚(7,13) = $2, which is positive. The minimum payoff that one user on path [1,3] is allocated is 𝑈1 − 𝑡(1,3) − 𝑝(1,3) = $0.5 (seller-optimal), which is smaller than the payoff of switching to path [1,7,13,3], indicating that if two users on path [1,3] switch to path [1,7,13,3] together, they would have the incentive of switching. Hence, considering local stability, both the solutions are stable, but it is not globally stable. In the second locally stable solution (𝑍𝐿1𝐶,3), there are 1.75 units of demand on path [1,21,11,12,4] for
OD pair 1 to 4, and the rest of the flows are the same as the optimal solution 𝑍𝐿1𝐶,2. MOD operator 9 operates link (11,12) with a fleet size 1. Similar to the first locally stable solution, users and operators do not have incentives to switch to the optimal solution. However, if 1.75 users on path [1,21,23,4] switch to path [1,21,11,12,4], the payoff per user is 𝑈2 − (𝑡(1,21) + 𝜏(21,11) + 𝑡(11,12) + 𝑡(12,4)) − 𝑝(1,21) − 𝑞11+𝑞12
1.75 −
𝑚(11,12) = $0.01 (seller-optimal). The minimum payoff that one user on path [1,21,23,4] is allocated is 𝑈2 − (𝑡(1,21) + 𝑡(21,23) + 𝑡(23,4)) − (𝑝(1,21) + 𝑝(23,4)) = $0.01(seller-optimal), which is the same as the payoff of 1.75 users switching to path [1,21,11,12,4], indicating that the 2 paths are equally attractive. 5.2 sioux falls case The algorithm is further tested on the Sioux Falls network. The traditional Sioux Falls network is modeled as a combination of a walking/transfer network and fixed-route transit service segments. Network parameters (link costs and capacities) are shown in Appendix A. Walking links have 0 operating cost and are not owned by any operator. All fixed transit links have an operating cost of $400. No alternative
capacities are modeled for the fixed-route services. There are 4 fixed transit lines in this case, marked in Fig. 6 with blue (Operator 1), pink (Operator 2), yellow (Operator 3), and green (Operator 4). All other links are walking/transfer links. The four fixed-route operators can choose to operate or not on each of the links they own. Three MOD operators operate in the region, marked with purple (Operator 5), light blue (Operator 6), and orange (Operator 7). Candidate service regions that they cover are marked in Fig. 6. The cost of opening each MOD node is $10, $5, and $15 for MOD operator 5, 6, and 7, respectively. Alternative fleet sizes for all 3 MOD operators are 1 and 2. OD demand is shown in Appendix B. The OD pairs are all the combinations between nodes 1, 2, 12, 18, 13, and 20 (30 OD pairs), totaling 9,700 trip demand. Utility 𝑈𝑠 is $20 for all OD pairs. The access/wait cost function and operating cost function of MOD are the same as the illustrative case. The access/wait cost function is 𝜏𝑙(∑ 𝑥𝑠𝑙𝑠∈𝑆 ; ℎ) = 2ℎ
−2 ∑ 𝑥𝑠𝑙𝑠∈𝑆 while the MOD link operating cost function is 𝑚𝑙 = 4ℎ 2. The expanded network has 82 nodes and 748 links. All the nodes covered by each MOD operator are
mutually connected with MOD links as complete subgraphs. The travel costs of MOD links are set to be 75% of the cost of the shortest path between the 2 nodes on the original network. MOD nodes and complete subgraphs are replicated to represent fleet sizes 1 and 2. Corresponding MOD nodes and original nodes are connected with MOD access links and egress links. The tolerance 𝜖 for subgradient optimization is 0.05. The tolerance 𝜀 of Frank-Wolfe and the required consecutive number of iterations is 0.01 and 5. All cases are run on a laptop with 2.3 GHz Quad-Core Intel Core i7 and 32 GB 3733 MHz LPDDR4X memory. 5.2.1. base case results The proposed algorithm converges after solving 131 branches, taking 2h 8min (59 sec per branch on average). Flows and fares of the final solution are shown in Fig. 7. The final solution is the only solution found in the by the branch and bound, hence the optimal solution to 𝐿1 (i.e. 𝑍𝐿1 ∗ ). The final solution is stable without subsidy, indicating that it is a MaaS platform equilibrium (i.e. 𝑍𝐿1𝐶 ) according to Corollary 3. Objective value is $106,400. Even if the MOD links are 25% faster than the shortest path of non-MOD links, there is no MOD
operation due to the high operating and infrastructure costs. Within the 4 transit lines, only the blue line operated by Operator 1 ended up operating. Users who travel on the horizontal direction walk to the stations of the blue line (node 1,3,12,13) and take the blue line. Operator revenue, users’ payoff, and unserved
demand are shown in the first column of Table 2. Unserved demand is 1,200 (12.4% of total demand). These users are not able to obtain non-negative payoffs given the current market and built environment. 5.2.2. reducing mod operating cost We model a scenario where the MOD operating costs are further reduced for Operator 5 (purple) by 50% to 𝑚𝑖𝑗 = 2ℎ 2 . Lower MOD operating costs could mean advances in MOD service technologies. For example, the reduction may be from adoption of better routing and matching algorithms and more efficient rebalancing strategies. In this scenario, the proposed algorithm converges after 165 branches, taking 3h 56 min (86 sec per
branch on average). The final solution requires subsidy. The subsidized objective value is $106,377.82. Three other subsidized MaaS platform equilibria are found, whose subsidized objective value are all higher than the final solution. No locally stable solution without subsidy is found. The flows and fares of the final solution are shown in Fig. 8, in which solid lines represent non-MOD flows and dashed links represent MOD flows. The lower cost of Operator 5 leads to market entry for Operator 5 to serve zones (1, 2, 3, 8, 10, 11, 12,
16) with fleet size 1. Because subsidy is needed, the outcome space is a single solution representing both buyer- and seller-optimal outcomes. Subsidy is required to stabilized path [18,16,1], [18,8,1], and [18,16,12], which are all paths with MOD. Sum of fare and travel cost of a user on path [18,16,1] is $22.51, which exceeds trip utility by $2.51. Hence a $2.51 subsidy per user is injected. Similarly, sum of fare and travel cost of a user on path [18,8,1] is also $22.51, and a $2.51 subsidy per user is injected. For path [18,16,12], sum of fare and travel cost of a user is $20.26, which exceed trip utility by $0.26. Since another walking path [18,16,10,11,12] also connects OD pair (18,12) with a travel cost of $18 (no fare), the user’s payoff of the walking path is $2 per user. User’s payoff of path [18,16,12] should also be $2 per user to be stable. Hence the subsidy needed for path [18,16,12] is $2.26. Although the operating cost reduction is only for Operator 5, the subsidy induces market entry for
Operator 7 (orange MOD) with a fleet size of 1. This is because some profitable paths involving Operator 5 also involves Operator 7 (path [18,8,1] and [20,8,1]). The benefit of the reduced operating cost of operator 5 is shared by operator 5 and 7, which is a result of coopetition between operators (Remark 1). Remark 1. The proposed model can quantify changes in operating costs for one operator in a MaaS platform inducing other operators’ market entry decisions due to coopetitive effects. Operator 5 serves zones 10 and 11 even though no demand directly goes there because of the
congestion effects at zones 12 and 16 are so high they push some travelers to go further away to access MOD service (Remark 2). Remark 2. The proposed model can quantify impacts of congestion on operators’ design decisions. Operator revenue, users’ payoff, and unserved demand are shown in the second column of Table 2. Total unserved demand dropped slightly to 1192.05 (12.3% of total demand). In this case, the impact of a lower operating cost for MOD Operator 5 on total supply of the system is not significant since some of the additional demand comes from fixed-route transit. More MOD operation also leads to higher computation time for each branch. With the same tolerance,
Lagrange multipliers converge more slowly with MOD access links involved, since path costs are affected by the flows on MOD access links. 5.2.3. reducing fixed-route operating cost We model reduced fixed-route operating cost by reducing the operating cost of fixed-route operator 4
(green line) by 60%, which may represent technological improvements as well as public subsidies from outside of the platform. Operating cost of all links on the green line is cut from 400 to 160. The proposed algorithm converges after solving 378 branches, taking 6h 17 min (60 sec per branch on
average). The final solution is locally stable without subsidy. The solution is the same as the base case (Fig. 7) with an objective value of $106,400. There are 51 other subsidized solutions found in branch and bound, whose subsidized objective values are all higher than the final solution. No locally stable solution without subsidy is found. Cost allocation results are shown in the third column of Table 2. The computation time is significantly
higher due to more branches solved, which is caused by a larger upper bound with subsidy added. The optimal solution to 𝐿1 requires subsidy and is shown in Fig. 9. Without subsidy, 𝑍𝐿1 ∗ = $106,160. The solution reflects the impact of reduced operating cost of the green line. Links (6,2), (2,6), (6,8), (8,6), (8,16), (16,8) are operated and used. However, the matching is unstable due to path [20,18,16,8,6,2]. The sum of travel cost and fare for one user of the path is $22.8, which is greater than trip utility. To stabilize the path, a subsidy of $2.8 is needed per user resulting in a total subsidy of $280. The subsidized objective value becomes 𝑍𝐿1 ∗ + 𝑍𝐿3 ∗ = $106,440, which is greater than the locally stable solution to 𝐿1𝐶 found. Remark 3. A reduction in operating cost to an operator may not have any impact on the market equilibrium due to local stability requirement. 5.2.4. heterogeneous demand In real-life cases, users are heterogeneous. We model two different income groups by assigning
different trip utilities. Demand of every OD pair are evenly split into 2 halves. The one with higher income has a trip utility of 𝑈𝑠 = $24 while the one with lower income has a trip utility of 𝑈𝑠 = $16, resulting in the same population average trip utility as the base case of $20. The proposed algorithm converged after 280 branches, taking 30h 16min (389 sec per branch on
average). Computation time is significantly larger due to larger dimensionality of OD pairs, since the number of user groups is increased from 30 to 60 to represent the two income levels. The final solution is not locally stable without subsidy, which means that it is a solution to 𝐿1𝑆, i.e. a feasible solution to the subsidized MaaS platform equilibrium. The subsidized objective value is $105,595.50. There are 13 other subsidized solutions found in branch and bound, with subsidized objective values higher than the final solution found. No locally stable solution without subsidy is found. The solution is shown in Fig. 10, in which solid lines represent non-MOD flows and dashed links
represent MOD flows. Cost allocation results are shown in the last column of Table 2. Compared with the base case, MOD operator 5 enters the market (zones 1, 2, 16) with a fleet size of 1, even if the cost parameters of MOD are the same as the base case. The difference is that only the higher-income users are served. Unserved demand substantially increases from the base case to 2240.22, in which 1,650 (73.7%) are lower-income users. In other words, by simply having a heterogeneous population, we reveal inequities as more mobility services enter the market but only serve users with higher income levels (Remark 4). Remark 4. The modeling of heterogeneous user groups can capture inequities in the market where operators enter primarily to serve higher income users while leaving more lower income users out of the platform. Subsidy is required to stabilized path [18,16,1], and [2,16,18], both paths with MOD chosen by the
higher-income group. The sum of fare and travel cost of a user on path [18,16,1] is $24.51, which requires
a $0.51 subsidy per user. Sum of fare and travel cost of a user on path [2,16,18] is also $27.83, which requires a $3.83 subsidy per user. MOD fares at buyer-optimal and seller-optimal vertices are the same given a very narrow stable outcome space of the paths that involves MOD. 6 conclusion In this study, we propose a MaaS platform design method for MaaS systems which incorporate fixed-
route transit services and MOD services, with dummy links that model users’ choice of not being a part of the system. The matching problem is formulated as a convex multicommodity network design problem. We
derive local stability conditions corresponding to this matching problem and define the optimum that is further constrained to be locally stable to be a globally stable MaaS platform equilibrium. We show that certain variables for this solution to be unique allowing for market design analysis. An exact solution algorithm is proposed to solve the matching problem. The algorithm has a branch
and bound framework. Each branch is solved through subgradient optimization with a Frank-Wolfe algorithm in each iteration. We prove that due to congestion effects, matchings may be locally unstable. A heuristic is derived from the exact algorithm to solve for a feasible solution to the MaaS platform equilibrium. Local stability is guaranteed by finding a solution that is either naturally stable or subsidized. Two sets of numerical examples are conducted. With the smaller toy case, we verify the model and
algorithm, showing how different locally stable solutions may exist of which one is the globally stable MaaS platform equilibrium. The larger case involves an expanded version of Sioux Falls with 82 nodes and 748 links. We show, among other insights, the following:
• The proposed model can quantify changes in operating costs for one operator in a MaaS platform inducing other operators’ market entry decisions due to coopetitive effects. • The proposed model can quantify impacts of congestion on operators’ design decisions. • A reduction in operating cost to an operator may not have any impact on the market equilibrium due to local stability requirement. • The modeling of heterogeneous user groups can capture inequities in the market where operators enter primarily to serve higher income users while leaving more lower income users out of the
platform. The method could be applied to service design of MaaS ecosystems, including network design, pricing,
and subsidy design. The method is able to incorporate services with different levels of flexibility: fixedroute transit (e.g. subway, bus) and MOD (e.g. ride-hailing, ride-sharing, bikesharing), and ensure the stability of the designed system. We can use this model to design external subsidies, fare bundles, different service region designs in the context of a mobility ecosystem, user heterogeneity, and evaluate the impact of a new external mode (which would alter the dummy link travel disutilities by altering the logsums). The current bottleneck to the computation cost is the shortest path finding. In the subgradient
optimization, different OD pairs have different network costs. Hence, the shortest path finding has to be run as one-to-one. When the number of user groups is large, computation cost can grow significantly if high accuracy is required, requiring modeling trade-offs in zone aggregation. Computation cost can be controlled by adjusting the tolerable gap between the upper and lower bound in branch and bound, and tolerance parameters of subgradient optimization and Frank-Wolfe algorithm. If there is a tolerable budget of subsidized system total cost, the branch and bound can be terminated when a solution below the budget is found.