 1 introduction Mechanism design on social networks is a new trend [24]. It specifically models the participants’ social connections in various games including matching, auctions and cooperative games. The social connections are private information for each participant, and those who are already in the game can decide whether or not to invite their direct neighbors. The primary purpose of this new study is to utilize participants’ social connections to expand the markets for better outcomes. In matching, more participants will give more matching choices and lead to a more satisfying matching outcome. This is essentially very useful to promote a game on a social network and to inspire new applications utilizing social platforms (such as online housing market1 and secondhand goods exchange markets2). However, inviting others is not always beneficial. Let’s consider a simple example that might happen in a house exchange game. Suppose there are two initial users, Alice and Bob. As shown in Figure 1(a), Alice and Bob prefer each other’s house and they will exchange if there is no other choice. Assuming Alice has a friend Charlie, Bob and Charlie will prefer to exchange with each other if three of them are in the game (Figure 1(b)). As a result, Alice will not invite Charlie if Charlie is not in the game yet. According to the example, we can see that participants have the power to selectively invite others for their own interests. Thus, themain obstacle formechanismdesign in the network setting is to provide incentives for participants to invite all their neighbors to join the game. In auctions, we can pay the harmed inviters some rewards [13]. In cooperative games, we can let the inviters share their invitees’ contributions [23].Matching as a non-monetary game faces a greater challenge since the mechanism cannot compensate for the loss caused by invitation through payments. To evaluate a matching mechanism, optimality and stability are two crucial properties. The former characterizes how good a matching is while the latter depicts the robustness of a matching, i.e., whether participants have incentives to deviate from the matching and exchange in a smaller group. The Top Trading Cycles (TTC) presented by Shapley and Scarf [18] is proved to be the only Pareto optimal and stable mechanism for one-sided matching with endowments [16]. However, TTC cannot work in the social network setting due to the lack of invitation incentives. As shown by Kumar et al. [12], more than half of the participants tend to form a smaller market under TTC. In the network setting, participants can decide the size of the market through strategic invitations, which causes the incompatibility between IC, stability, and optimality. Hence, it is valuable to understand what else we can achieve with IC near stability or optimality [11, 21]. Previous work has defined a new notion of stability under the network setting and has designed mechanisms to achieve it [21]. As far as we are concerned, no previous work has investigated the new notion of optimality compatible with IC in the network setting. Therefore, we propose new notions of optimality and prove their compatibility with IC and stability (Section 4). 1https://www.homeexchange.com, https://www.lovehomeswap.com 2https://www.freecycle.org
2 Given the achievable notions of stability and optimality, we design an IC mechanism called Connected Trading Cycles (CTC) to satisfy them (Section 5). We concentrate on two features, trading cycles and social connections, which are the principles of one-sided matching and social networks respectively. An allocation in one-sided matching consists of several trading cycles among agents. The key is to let everyone point to her favorite item, so the correlated trading cycles ensure optimality and stability. However, whether a trading cycle can get formed and traded is determined by its corresponding social connections in the network. Intrinsically, in the network setting, the trading cycles should build on a particular group of agents who know each other through their social connections within the group. In this way, no one outside the cycle has the power to break the trading cycle. Following this principle, we combine two features together to design Connected Trading Cycles. Different from the previous solutions, we do not restrict agents’ choice scope, and they can choose anyone in the game. Finally, we give the first characterization of IC in the network setting (Section 7). We propose two monotonicity conditions that depict IC one-sided matching on networks to help mechanism designers construct and identify new IC solutions. Our Contributions
• We prove the achievable notions/boundaries of stability and optimality with incentive compatibility for one-sided matching in the network setting. • We propose a new mechanism called Connected Trading Cycles that reaches the theoretical boundaries and dominates the existing mechanisms. • We give the first characterization of incentive-compatible one-sided matching mechanisms in the network setting. 2 literature review Li et al. [15] initiate the line of research on mechanism design over social networks. This new setting models the market in a dynamic way andmakes use of the power of social networks to offer both the participants and themarket owner a better outcome [24]. In the social network setting, the classic solutions cannotwork anymore because they fail to provide invitation incentives. For games with monetary transfers, like auctions and cooperative games, we can incentivize invitations to form a larger game by giving them rewards [13, 23]. However, when it comes to non-transferable utility games like matching, incentives for invitation are harder to design. In the network setting, the incentive compatibility notion for one-sided matching is defined in two dimensions. Due to the expansion of IC, the appropriate solution space for mechanism designers also changes. Thus, how to characterize the IC one-sided matching mechanisms in the network setting is an important problem. In literature, finding the characterization for desired properties has always been a rich research topic. Takamiya [20] characterizes the IC as well as the core solution for the housing market. Later on, Sönmez and Ünver [19] study the characterization of a variant of the housing market. Seeking alternative depictions for TTC is also an active research field [4, 6, 17]. These works provide insights for the mechanism designers and help them come up with better algorithms. In this paper, we present an IC characterization of the new setting. For matching over social networks, designing invitation incentives can help enlarge the selection space and improvematching results for the participants. Kawasaki et al. [11] andYou et al. [22] degenerate social networks to trees and modify the classic mechanisms to incentivize invitations for housing market as well as its variant [1]. Specifically, they add limits on the selection space of the participants in a tree to incentivize invitations. Yang et al. [21] take a step forward and propose a mechanism that works for all networks. In their mechanism, participants can only choose from their current neighbor set, and their neighbor set is dynamically shared when participants
3 leave the market. Due to the sharing process, their mechanism gives a more efficient outcome. For two-sided matching, Cho et al. [7] model the school choice problem into the network setting and design invitation incentives for the student side only. Another thread of work also takes the social network and its influence into consideration, but they differ from our setting [9, 10]. In their setting, the social network is priorly known and acts as a constraint for possible allocations. Besides incentive compatibility, optimality is another concerned property for one-sided matching mechanisms [2]. The celebrated TTC is the only Pareto optimal and stable solution in the traditional setting [16]. When it comes to the house allocation problem, optimal solutions are multiple. Abraham et al. [3] study various ways to evaluate the optimality of a house allocation mechanism and illustrate why TTC gives the Pareto optimal allocation. Fleischer and Wang [8] point out the transitions between different optimal allocations in the house allocation problem. Brandt and Wilczynski [5] analyze whether different types of dynamic pairwise swaps converge to Pareto optimal allocations for matching markets. However, no previous work has investigated achievable optimality in the network setting. To evaluate the efficiency of a mechanism, we need to redefine an optimality notion in the new setting. Hence, we construct a tight optimality notion and design a mechanism to reach it. 3 the model In this section, we model one-sided matching over social networks with formal definitions. A onesided matching market consists of a set of agents # = {1, . . . , =}, each with an indivisible initial endowment, usually referred to as a house. We denote the set of endowments as = {ℎ1, . . . , ℎ=}. Every agent 8 has a strict preference ≻8 over the endowment set . Specifically, ℎ 9 ≻8 ℎ: indicates agent 8 prefers ℎ 9 over ℎ: . We use 8 to represent a weak preference where ℎ 9 8 ℎ: implies that agent 8 strictly prefers ℎ 9 over ℎ: , or 8 is indifferent with ℎ 9 and ℎ: . To characterize the social network, we use an undirected graph = (#, ) to depict the social connections among agents in # . We say agents 8 and 9 are neighbors to each other if there exists an edge (8, 9 ) ∈ . Let A8 represent the neighbor set of agent 8 , then (8, 9 ) ∈ indicates 8 ∈ A 9 and 9 ∈ A8 . In our setting, the social network is not priorly known to anyone. Both the preference and the neighbor set are private information to each agent. We define a type profile \8 = (≻8 , A8) for agent 8 , which consists of her preference ≻8 and her neighbor set A8 . We denote the type profile for all agents as \ = (\1, . . . , \=) and Θ as the type profile space. Let \−8 be the type profile without agent 8 , then we have \ = (\8, \−8). Analogously,Θ = (Θ8 ,Θ−8 ). We denote agent 8’s reported type profile as \ ′8 = (≻ ′ 8 , A ′ 8 ), \ ′ 8 ∈ Θ8 . In practice, reporting one’s neighbor set equals inviting one’s neighbors to join the game. One cannot report a non-neighbor as her neighbor, because she does not know the others. Thus, we have A ′8 ⊆ A8 for each agent 8 . Definition 3.1. A one-sided matching mechanism is defined by an allocation policy c = (c8 )8 ∈# , where c8 : Θ → satisfies for all \ ∈ Θ, for all 8 , c8 (\ ) ∈ , and c8 (\ ) ≠ c 9 (\ ) for all 8 ≠ 9 . The above definition is the standard, and we need some constraints to cope with the twodimensional type profile. Since the social connections are private information in our setting, a matching market over social networks usually starts with an initial set of agents #0 ⊂ # , who are the selected seed participants, or neighbors of the sponsor. The agents already in the market then report their type profile \ ′ to enlarge the market. With the reported profile \ ′, we construct the diffusion matchingmarket as a directed graph (\ ′) = (# (\ ′), (\ ′)), with# (\ ′) = {1, . . . , =} and 〈8, 9〉 ∈ (\ ′) indicates 9 ∈ A ′8 . We define& (\
′) as the set of qualified agents who can participate in the matching and # (\ ′) \& (\ ′) as the set of unqualified agents who stay outside of the diffusion market with their initial endowments. Note that agent 8 ∈ & (\ ′) if and only if there exists a path
4 from #0 to 8 in (\ ′), which means 8 is invited to the market by a series of invitations. Thus, all agents in & (\ ′) forms a connected graph in (\ ′). Definition 3.2. A diffusion one-sided matching mechanism in social networks is a one-sided matching mechanism, c = (c8 )8 ∈# , such that for all reported type profiles \ ′ ∈ Θ, it satisfies:
(1) for all unqualified agents 8 ∉ & (\ ′), c8 (\ ′) = ℎ8 . (2) for all qualified agents 8 ∈ & (\ ′), c8 (\ ′) is independent of the report of all unqualified agents. We then define desirable properties for a diffusion one-sided matching mechanism. Firstly, to incentivize rational agents to join a game, a mechanism should at least guarantee joining in the game is not losing for each agent if she behaves truthfully. We call this property individual rationality. Definition 3.3 (Individual Rationality (IR)). A diffusion one-sided matching mechanism c is individually rational if for all 8 ∈ # , all \8 ∈ Θ8 , and all \ ′ −8 ∈ Θ−8 , we have c8 (\8, \ ′ −8) 8 ℎ8 . Furthermore, incentivizing all agents to report their types truthfully is the key property of diffusion mechanisms. This requires that revealing true preference and inviting all neighbors to join in the game is a dominant strategy for all agents. We formulate this property as incentive compatibility. Definition 3.4 (Incentive Compatibility (IC)). A diffusion one-sided matching mechanism c is incentive compatible if for all 8 ∈ # , all \ ′−8 ∈ Θ−8 and all \8, \ ′ 8 ∈ Θ8 , we have c8 (\8, \ ′ −8) 8 c8 (\ ′ 8 , \ ′ −8). For one-sided matching mechanisms, stability and Pareto optimality are used to measure the quality of the outcome. We formalize them for diffusion one-sided matching mechanisms as follows. Definition 3.5 (Stability). A diffusion one-sided matching mechanism c is stable if for all type profiles \ and the allocation c (\ ), there is no agent set ( ⊆ # (with item set ( ⊆ ) and another allocation c ′(\ ) with ∀8 ∈ (, c ′8 (\ ) ∈ ( such that ∀8 ∈ (, c ′ 8 (\ ) 8 c8 (\ ) and ∃ 9 ∈ (, c ′ 9 (\ ) ≻9 c 9 (\ ). Namely, a matching is stable if no coalition of agents wants to leave the matching to match alone. Definition 3.6 (Pareto Optimality (PO)). A diffusion one-sided matching mechanism c is Pareto optimal if for all type profiles \ and the allocation c (\ ), there is no other diffusion one-sided matching mechanism c ′ such that ∀8 ∈ #, c ′8 (\ ) 8 c8 (\ ) and ∃) ⊆ #,) ≠ ∅, ∀9 ∈ ) , c ′ 9 (\ ) ≻9 c 9 (\ ). The above definition of PO is an equivalent form of that in the traditional model. The reason why we define PO this way is for the simplicity of its extensions in the network setting. Yang et al. [21] prove that these two properties are not compatible with IC and IR in the social network setting. For stability, they propose that the group who deviate and swap among themselves be a connected component or a complete component to define weaker notions. They show that stable under complete components is compatible with IC. We apply the same notions here. Definition 3.7 (Stability under Connected Components (Stable-c)). A diffusion one-sided matching mechanism c is stable under connected components if for all type profiles \ and the allocation c (\ ), there is no agent set ( ⊆ # (with item set ( ⊆ ), that forms a connected component in (\ ), and another allocation c ′(\ ) with ∀8 ∈ (, c ′8 (\ ) ∈ ( such that ∀8 ∈ (, c ′ 8 (\ ) 8 c8 (\ ) and ∃ 9 ∈ (, c ′9 (\ ) ≻9 c 9 (\ ). 5 Definition 3.8 (Stability under Complete Components (Stable-cc)). A diffusion one-sided matching mechanism c is stable under complete components if for all type profiles \ and the allocation c (\ ), there is no agent set ( ⊆ # (with item set ( ⊆ ), that forms a complete component in (\ ), and another allocation c ′(\ ) with ∀8 ∈ (, c ′8 (\ ) ∈ ( such that ∀8 ∈ (, c ′ 8 (\ ) 8 c8 (\ ) and ∃ 9 ∈ (, c ′9 (\ ) ≻9 c 9 (\ ). For optimality, we follow the new notions of stability and do a similar relaxation. By definition, Pareto optimality requires that the allocation cannot improve without making anyone worse off. Intuitively, we can regard the Pareto improvement as a reallocation process posterior to a certain allocation. In suchway, we require those who can be reallocated should at least have a path to their reallocated items. Therefore, we further require the improved agents to be a connected component or a complete component to weaken optimality. Definition 3.9 (Optimality under Connected Components (Optimal-c)). Adiffusion one-sidedmatching mechanism c is optimal under connected components if for all type profiles \ and the allocation c (\ ), there is no other diffusion one-sided matching mechanism c ′ such that ∀8 ∈ #, c ′8 (\ ) 8 c8 (\ ) and ∃) ⊆ #,) ≠ ∅, ∀9 ∈ ) , c ′ 9 (\ ) ≻9 c 9 (\ ) and) forms a connected component in (\ ). Definition 3.10 (Optimality under Complete Components (Optimal-cc)). A diffusion one-sided matching mechanism c is optimal under complete components if for all type profiles \ and the allocation c (\ ), there is no other diffusion one-sided matching mechanism c ′ such that ∀8 ∈ #, c ′8 (\ ) 8 c8 (\ ) and ∃) ⊆ #,) ≠ ∅, ∀9 ∈ ) , c ′ 9 (\ ) ≻9 c 9 (\ ) and ) forms a complete component in (\ ). 4 theoretical boundaries In this section, we study the relationship between stability and optimality. Furthermore, we show that Swap With Neighbors (SWN), Swap With Children (SWC), and Leave and Share (LS) [21], cannot satisfy any version of optimality.We characterize the implication between different notions of stability and optimality in Figure 2 and reveal the theoretical boundaries for diffusion one-sided matching mechanisms. 6 By definition, Pareto optimality implies optimal-c and further implies optimal-cc. Similarly, stable implies stable-c and further implies stable-strict-c and stable-cc. The following theorems help us depict the relationship between optimal and stable properties. Theorem 4.1. A mechanism c is stable implies that c is Pareto optimal. Proof. For all type profiles \ , if a stable mechanism c is not Pareto optimal, there exists a group ) and c ′ such that ∀9 ∈ ) , c ′9 (\ ) ≻9 c 9 (\ ), and ∀8 ∈ # , c ′ 8 (\ ) 8 c8 (\ ). In this case, we can construct a group of agents ( starting from ) , and consecutively add other agents so that ∀8 ∈ ( , c ′8 (\ ) ∈ ( . So, ( can deviate from the matching together which violates stable. Thus, c is stable implies that c is Pareto optimal. Theorem 4.2. A mechanism c is stable-c implies that c is Pareto optimal. Proof. For all type profiles \ , if c is stable under connected components but fails Pareto optimal, there exists a group) and c ′ such that∀9 ∈ ) , c ′9 (\ ) ≻9 c 9 (\ ), and∀8 ∈ # , c ′ 8 (\ ) 8 c8 (\ ). Since in diffusion one-sided matching, the unqualified agents always get their own items, agents in group ) must be the qualified agents. Given that all qualified agents is a connected component, they can deviate together to get c ′ which violates stable under connected components. Thus, c is stable-c implies that c is Pareto optimal. Theorem 4.3. A mechanism c is stable-cc does not imply that c is optimal-cc. Proof. Consider the example given in Figure 3, allocation c = (ℎ2, ℎ1, ℎ4, ℎ3) is stable under complete components. However, there exists another allocation c ′ = (ℎ2, ℎ4, ℎ1, ℎ3) where {2,3} is a strictly better off group. This means the stable-cc mechanism c fails to be optimal-cc. 1 2 3 4
Fig. 3. Preferences are ℎ3 ≻1 ℎ2 ≻1 ℎ1, ℎ4 ≻2 ℎ1 ≻2 ℎ2, ℎ1 ≻3 ℎ4 ≻3 ℎ3, ℎ2 ≻4 ℎ3 ≻4 ℎ4. Theorem 4.4. A mechanism c is Pareto optimal does not imply that c is stable-cc. Proof. Consider the example given in Figure 4, allocation c = (ℎ2, ℎ3, ℎ4, ℎ1) is Pareto optimal. But it fails stable under complete components because there exists another allocation c ′ = (ℎ1, ℎ2, ℎ4, ℎ3) where {3,4} is a complete component, they deviate and swap among themselves for a better match compared to c . The existence of this subset of agents violates stable under complete components. Thus, Pareto optimal fails to imply stable-cc. We can see that the theoretical boundary for diffusion one-sided matching is attaining stable-cc and optimal-c. However, this boundary is not attainable by any of the mechanisms proposed in the literature so far. Theorem4.5. SwapWith Children, Leave and Share, and SwapWith Neighbor presented byKawasaki et al. and Yang et al. cannot satisfy optimal-c.
7 Proof. In the example given in Figure 3, the allocations given by SWC, LS and SWNare identical, which is c = (ℎ2, ℎ1, ℎ4, ℎ3). There exists an optimal-c allocation c ′ = (ℎ2, ℎ4, ℎ1, ℎ3) that dominates c . Thus, these mechanisms fail optimal-c. In the next section, we present a mechanism called Connected Trading Cycles (CTC), which allow agent 1 and 3, agent 2 and 4 swap with each other in Figure 3. We also prove that CTC satisfies optimal-c, whichmeans it dominates the other threemechanisms and reach the theoretical boundary. 5 connected trading cycles In this section, we present our mechanism called Connected Trading Cycles (CTC) which takes both the trading cycles and agents’ connections into concerns. CTC can satisfy IC, optimal-c and stable-cc, which is the theoretical boundary of the network setting. First of all, several definitions are declared to simplify the description of our mechanism. Definition 5.1. Given a reported type profile \ ′, we generate a directed graph (\ ′), in which each qualified agent has exactly one out-degree pointing to any qualified agent in (\ ′). The pointing from each agent 8 to 9 (8, 9 can be the same agent) means 9 is a qualified agent and ℎ 9 is the smallest ranked item in ≻′8 . We name the graph as the favorite pointing graph for \ ′. There is at least one cycle in (\ ′) andwe should clarifywhether the cycles can get traded or not. We classify the cycles into three categories, independent connected-cycles, dependent connectedcycles and unconnected-cycles, defined as follows. In this paper, we use connected-cycle to represent either dependent connected-cycle or independent connected-cycle for simplicity. Definition 5.2. Given a favorite pointing graph (\ ′) and a node sequence (21, 22, ..., 2<), for simplicity we use 8 to represent the node sequence in which 8 = 2< . If there exists an edge 〈2 9 , 2 9+1〉 for any 2 9 ∈ 8 , 2 9 ≠ 2< and 〈2< , 21〉, then there is a cycle involving 8 in (\
′), we denote the cycle by 8 . a. 8 is an independent connected-cycle in (\ ′) if all agents in 8 can form a connected
component in (\ ′). b. 8 is a dependent connected-cycle if there exists a cycle set C = { 8 , 9 , . . . } in (\
′) and all agents in C can form a connected component in (\ ′), ∀C′ ( C, all agents in C′ cannot form a connected component in (\ ′). c. All cycles other than a. and b. are unconnected-cycles. We illustrate the three types of cycles in Figure 5. As shown in sub-figure (a), 4 = (1, 3, 2, 4) is an independent connected-cycle. In sub-figure (b), 3 = (1, 3) and 4 = (2, 4) are two dependent connected-cycles. In sub-figure (c), 3 = (2, 3) is an independent connected-cycle, and 4 = (1, 4) is an unconnected-cycle. 8 The heart of our mechanism is to find connected-cycles in the favorite pointing graph (\ ′) and let them get traded. Inspired by the sharing idea first proposed by Yang et al., we first match the connected-cycles in the favorite pointing graph, and share their neighbors to construct more connectivity among agents. This will not cause incompatibility with IC because agents who get their favorite item have no incentives to misreport, nor do they care about the rest of the market. Unfortunately, not all agents can get their most preferred item, some have to switch their pointing in (\ ′) to a less preferred one. So, we define a next favorite function to adjust (\ ′) based on agents’ preferences. Definition 5.3. Given a reported type profile \ ′ and a favorite pointing graph (\ ′), we have ≻=4GC8 ( (\ ′)) = 9 , 9 ∈ & (\ ′), if 9 is the qualified agent who owns 8’s next favorite item. Since our mechanism involves preference switching, we need a strategy-proof order, defined upon agent’s shortest length to the initial players, to decide which agent should switch her preference under certain circumstances. Definition 5.4. An order of agents is a one-to-one function O : N+ → # , where agent O(8) is the 8Cℎ agent in the order. Agents in O are sorted in ascending order by the length of the shortest path from agent set #0 to them. Especially, for any agent 8 ∈ #0, its shortest path length is 0.When multiple agents have the same length of the shortest path, we use a random tie-breaking. Now we are ready to introduce our mechanism. Connected Trading Cycles
Given a reported type profile \ ′, construct the favorite pointing graph (\ ′). Initiate a settled agent set + = ∅. Executing the following steps until + = #
a. Find the agent 8 ∈ # \+ with 0 in-degree in (\ ′) who has the minimum order. If there is no 0 in-degree agent, find the agent 8 ∈ # \+ with the minimum order. b. Detect a path %?1 = (?1, . . . , ? : , . . . , ?<) in (\ ′) starting from ?1 that satisfies there
exists an edge 〈? 9 , ? 9+1〉 for any ? 9 ∈ %8 , ? 9 ≠ ?< , and 〈?<, ? :〉. Especially, ?< = (? : , . . . , ?<) is a cycle in (\
′). i If ?< is an independent connected-cycle or a dependent connected-cycle, add all agents in ?< to settled agent set + . ii If ?< is an unconnected-cycle, reversely track %?1 from ?< to ?1, find the first ? ;−1 who points to an agent ? ; and no connected component containing ? ;−1 and ? ; in (\ ′) is a subset of ?< . If ; = < and any path from ? :−1 to ? : passes through ?< , change edge〈? :−1, ? :〉 to 〈? :−1,≻ =4GC ? :−1
( (\ ′))〉. Otherwise, change the edge 〈? ; , ? ; ′〉 to 〈? ; ,≻?=4GC
;
( (\ ′))〉. c. While there exists an edge 〈?,@〉 in (\ ′) that satisfies ? ∈ # \+ ,@ ∈ + , change 〈?,@〉 to 〈?, ≻=4GC? ( (\ ′))〉
In our mechanism, the allocation relies on the cycles in the favorite pointing graph. These cycles ensure optimality, so agents will truthfully report their preferences. We further classify the cycles by social connections and protect the connected-cycles while break the unconnected-cycles. We allow the connected-cycles to form because their connectivity is only determined by agents in the cycles and cannot be influenced by others. It is natural for the independent connected-cycle since the cycle itself is formed by a connected component. For the dependent connected-cycle, we require that no subset of the cycle set be a connected component. Namely, all agents in the cycle
set rely on each other to form connected-cycle and get traded, so they share the same interest. This prevents agents from misreporting to form connected-cycles for their own good using the already formed cycles. To sum up, these two types of connected-cycles target at allowing cycles in the favorite pointing graph as much as possible. As for the unconnected-cycles, to maintain optimality, we try to sustain the favorite pointing along the cycles to the greatest extent. We only let those who cannot connect to her pointing with the help of the cycle switch pointing (as in b.ii). We present a detailed example to illustrate our mechanism. The initial agent set is #0 = {1}. The order is O = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11). The social network, type profiles, and allocation are presented in Figure 6. The following steps match the sub-figures in Figure 7. (a) At the beginning, agent 1 has 0 in-degree and theminimumorder. The path is %1 = (1, 10, 2, 4, 6). Since 6 = (4, 6) is a dependent connected-cycle, add 6 to + . Since agent 2 is in # \+ and agent 4 is in + , change 〈2, 4〉 to 〈2,≻=4GC2 ( (\
′)) = 1〉. (b) Then agent 3 has 0 in-degree and the minimum order, the path is %3 = (3, 2, 1, 10). Since
10 = (2, 1, 10) is an unconnected-cycle and no connected component containing 10 and 2 in (\ ′) is a subset of 10, change 〈10, 2〉 to 〈10,≻ =4GC 10 ( (\
′)) = 11〉. (c) Agent 3 still has 0 in-degree and the minimum order. The path is %3 = (3, 2, 1, 10, 11). Since
11 = (2, 1, 10, 11) is an unconnected-cycle and no connected component containing 11 and 2 in (\ ′) is a subset of 11, change 〈11, 2〉 to 〈11,≻ =4GC 11 ( (\
′)) = 10〉. (d) Agent 3 still has 0 in-degree and the minimum order. The path is %3 = (3, 2, 1, 10, 11). Since
11 = (10, 11) is an independent connected-cycle, add 11 to+ . Since agent 1 is in # \+ and agent 10 is in + , change 〈1, 10〉 to 〈1, ≻=4GC1 ( (\
′) = 2〉 (e) Agent 3 still has 0 in-degree and the minimum order. The path is %3 = (3, 2, 1). Since 1 =
(2, 1) is an independent connected-cycle, add 1 to + . Since agent 3 is in # \+ and agent 2 is in + , change 〈3, 2〉 to 〈3,≻=4GC3 ( (\
′)) = 3〉. (f) No agent in (\ ′) has 0 in-degree. Agent 3 has the minimum order in # \ + . The path is
%3 = (3). Since 3 = (3) is an independent connected-cycle, add 3 to + . No agent in (\ ′) has 0 in-degree. Agent 5 has the minimum order in # \ + . The path is %5 = (5, 7). Since 7 = (5, 7) is a dependent connected-cycle, add 7 to + . (g) No agent in (\ ′) has 0 in-degree. Agent 8 has the minimum order in # \+ . The path is %8 = (8, 9). Since 9 = (8, 9) is an unconnected-cycle and no connected component containing 9 and 8 in (\ ′) is a subset of 9, change 〈9, 8〉 to 〈9, ≻ =4GC 9 ( (\ ′)) = 9〉. 10
(h) Now agent 8 has 0 in-degree and the minimum order. The path is %8 = (8, 9). Since 9 = (9) is an independent connected-cycle, add 9 to + . Since agent 8 is in # \ + and agent 9 is in + , change 〈8, 9〉 to 〈8, ≻=4GC8 ( (\
′)) = 8〉. (i) No agent in (\ ′) has 0 in-degree. Agent 8 has the minimum order in # \ + . The path is
%8 = (8). Since 8 is an independent connected-cycle, add 8 to + . Now + = # , the mechanism ends. 6 properties of ctc In this section, we prove that Connected Trading Cycles (CTC) is IR, IC, optimal-c and stablecc. As shown in Table 1, all previous mechanisms fail to satisfy optimal-c, and CTC reaches the theoretical boundaries. Theorem 6.1. For any order O, CTC is IR. Proof. In CTC, every agent 8 can point to her own itemℎ8 . When 8 does so, 8’s pointing to herself is an independent connected-cycle and our mechanism will assign ℎ8 to 8 . So, CTC is IR. 11
Theorem 6.2. For any order O, CTC is IC. Proof. We first consider the truthfulness of agent’s report on preference under any given neighbor set report. Supposec8 (((≻8 , A ′ 8 ), \ ′ −8)) = ℎ 9 , c8 (((≻ ′ 8 , A ′ 8 ), \ ′ −8)) = ℎ 9′ , andℎ 9′ ≻8 ℎ 9 . Assume agent @ is allocatedℎ 9′ when agent 8 truthfully reports preference. Then there exists a connected-cycle 1 involving 〈@, 9 ′〉. Since c8 (((≻ ′ 8 , A ′ 8 ), \ ′ −8)) = ℎ 9′ , there exists another connected-cycle 2 involving 〈8, 9 ′〉. Thus, there must exist an agent C on both 1 and 2 whose pointing is different. Let the two pointing be 〈C, C1〉, C1 ∈ 1 and 〈C, C2〉, C2 ∈ 2. Given that @ is allocated ℎ 9′ when agent 8 truthfully reports preference, 1 forms which means ℎC1 ≻ ′ C ℎC2 . Similarly, since agent 8 is allocated ℎ 9′ when she misreports, 2 forms which means ℎC2 ≻ ′ C ℎC1 . This is a contradiction since each agent has a strict preference. Hence, regardless of the report on neighbor set, truthfully reporting preference is a dominant strategy for all agents. Then we consider the truthfulness of agent’s report on neighbor set under any given preference report. Suppose c8 (((≻ ′ 8 , A8), \ ′ −8)) = ℎ 9 , c8 (((≻ ′ 8 , A ′ 8 ), \ ′ −8)) = ℎ 9′ , and ℎ 9′ ≻ ′ 8 ℎ 9 . So, there exists a connected-cycle 1 involving 〈8, 9 ′〉 when 8 misreports as (≻′8 , A ′ 8 ). By the definition of connectedcycles, 8 and 9 ′ are involved in a connected component ( where no subset of agents in ( forms a connected-cycle. Sinceℎ 9′ ≻ ′ 8 ℎ 9 , when truthfully reporting neighbor set, 8 must have pointed 〈8, 9 ′〉 before 〈8, 9〉 and is forced to switch to the next on her preference. This indicates that the cycle 2 involving 〈8, 9 ′〉 when 8 reports (≻′8 , A8) is an unconnected-cycle. Note that the difference in these two cases is caused by 8 misreporting A ′8 . If some agents are unqualified because of 8’s misreporting, it means they can only connect to others by 8 , so their joining in the match cannot change the fact that 〈8, 9 ′〉 can be involved in a connected-cycle.On the other hand, if no agent becomes unqualified because of 8’s misreporting, 8 misreports as (≻′8 , A ′ 8 ) can only decrease her connection to others which is not beneficial. Hence, if 8 is allocated ℎ′9 when misreporting neighbor set, 8 can also getℎ ′ 9 when she truthfully reports which contradicts our assumption. Though misreporting on neighbor set can have impact on the order, with the truthfully reported preferences, whether a cycle can get traded is only determined by the connections as shown above. The changes in the order cannot influence the allocation. Thus, regardless of the preference report, truthfully reporting neighbor set is a dominant strategy for all agents. Combining them together, CTC is IC. Theorem 6.3. For any order O, CTC is optimal-c. Proof. For any given type profile \ , if CTC violates optimal-c, there exists a connected component ) ⊆ # , with the allocation c (\ ) given by CTC, a reallocation c ′(\ ) among ) based on c (\ ) makes every agent in) strictly better. We construct a cycle set Cwhich consists of the cycles given by c involving agents in) . By the rule of CTC, all the cycles in C are connected-cycles. We denote the reallocation cycle set given by c ′(\ ) as C∗. By definition of connected-cycles, since ) is a connected component there exists at least one connected-cycle in C∗. Otherwise, C∗ itself
12
is a connected-cycle. For each connected-cycle ) in C ∗, we let each agent 8 on the cycle switch her pointing to the owner of c ′8 (\ ). We denote all the cycles changed in C as C8 ⊆ C and they change to C∗8 . Since all cycles in C8 are changed, every cycle in C ∗ 8 involves at least one agent in ) . Given that ) is a connected-cycle and all cycles in C8 are connected-cycles, all cycles in C ∗ 8 are connected-cycles. Thus, C∗8 ⊆ C, which means c = c ′ for all agents in C∗8 . By the assumption, the strictly better off group) does not contain these connected-cycles. Hence, all the cycles in C∗ are unconnected-cycles. This means agents in ) cannot form a connected component in (\ ) which contradicts our assumption. Thus, CTC is optimal-c.
Theorem 6.4. For any order O, CTC is stable-cc. Proof. For any given type profile \ , if CTC violates stable-cc, there exists a group of agents ( that forms a complete component in (\ ), they deviate together and swap among themselves can result in a better allocation c ′(\ ) compared to c (\ ) given by CTC. Since group ( is a complete component, all the cycles formed in c ′(\ ) are independent connected-cycles. In CTC, all these cycles are allowed to get traded. That is to say, CTCwill assign them exactly c ′, which contradicts our assumption. Hence, CTC is stable-cc. 7 incentive compatible diffusion one-sided matching Takamiya [20] characterizes the strategy-proof housing market mechanisms by preference monotonicity. He shows that with others’ preferences fixed, if an agent 8 gets ℎ 9 when reporting ≻ ′ 8 , she also gets ℎ 9 even if ℎ 9 is moved to a higher rank in ≻ ′ 8 . TTC satisfies this condition since 8 gets ℎ 9 indicating all items better than ℎ 9 for agent 8 are in trading cycles without 8 , and moving ℎ 9 to a higher rank will not influence those cycles without 8 . We can easily introduce preference monotonicity into the network setting. Definition 7.1. Given agent 8’s preference profile ≻8 and her allocation c8 , we denote the set of less preferred items for agent 8 by ! (c8 ,≻8) = {: ∈ |c8 ≻8 :}. We say an allocation c is preference-monotonic if for any agent 8 ∈ # , if ! (c8 ,≻ ′ 8 ) ⊂ ! (c8, ≻ ′′ 8 ), we have c8 ((≻ ′ 8 , A ′ 8 ), \ ′ −8) = c8 ((≻ ′′ 8 , A ′ 8 ), \ ′ −8). However, preference monotonicity cannot characterize IC in the network setting for it lacks the constraint over the neighbor set report. Let’s look back to the house exchange example in the Introduction to get some insights. To incentivize Alice to invite Charlie, we should guarantee that inviting others will not worsen her result. That is, if she can get Bob’s house in the Alice-and-Bob market, she can get allocated a house no worse than Bob’s when inviting more people. We define this monotonicity of invitation as diffusion monotonicity, which is also studied in the diffusion auction setting [14]. Definition 7.2. We say an allocation c is diffusion-monotonic if for any agent 8 ∈ # , if A ′′8 ⊂ A ′ 8 ,
we have c8 ((≻ ′ 8 , A ′ 8 ), \ ′ −8) ′ 8 c8 ((≻ ′ 8 , A ′′ 8 ), \ ′ −8). Now, we are ready to present the IC characterization for the diffusion one-sided matching. Theorem 7.3. A diffusion one-sided matching mechanism is incentive compatible if and only if
the allocation c is preference-monotonic and diffusion-monotonic. Proof. Suppose an IC mechanism c fails preference-monotonic, then there exists agent 8 ∈ # and a preference profile ≻′8 where ! (c8 , ≻ ′ 8 ) ⊂ ! (c8 , ≻ ′ 8 ), and we have ℎ 9′ = c8 ((≻ ′ 8 , A ′ 8 ), \ ′ −8), ℎ 9 = c8 ((≻8, A ′ 8 ), \ ′ −8), ℎ 9 ≠ ℎ 9′ . Then either ℎ 9′ ≻8 ℎ 9 or ℎ 9 ≻8 ℎ 9′ . In the former case, misreporting ≻ ′ 8 gives agent 8 a better allocation and violates IC. In the latter case, c fails to be IC when 8’s true preference is ≻′8 . Hence, if a mechanism is IC, it is preference-monotonic. 13
Similarly, suppose an IC mechanism c fails diffusion-monotonic, then there exists agent 8 ∈ # and a neighbor set A ′8 where A ′ 8 ⊂ A8 , and we have ℎ 9′ = c8 ((≻ ′ 8 , A ′ 8 ), \ ′ −8), ℎ 9 = c8 ((≻ ′ 8 , A8), \ ′ −8), and ℎ 9′ ≻ ′ 8 ℎ 9 . In other words, agent 8 can misreport to make her allocation better, which violates IC. Hence, if a mechanism is IC then it is diffusion-monotonic. We then prove that if a mechanism is preference-monotonic and diffusion-monotonic, it is IC. That is to say, a mechanism fails IC suggesting that it fails at least one of the monotonicity. If a mechanism c is not IC, it means that for at least one agent 8 , she can better her allocation by misreporting her type. If 8 misreports her neighbor set, the reported A ′8 must be a subset of the true neighbor set A8 . Thus, 8 getting a better allocation under A ′ 8 violates diffusion-monotonic. On the other hand, if 8 misreports her preference profile as ≻′8 to get a better allocation which means ℎ 9′ ≻8 ℎ 9 , we will show that this violates preference-monotonic. Let’s construct a preference profile ≻∗8 for agent 8 , such that the items that ranked first and second in ≻ ∗ 8 are ℎ 9′ and ℎ 9 respectively. By this construction, we have ! (ℎ 9′ ,≻ ′ 8 ) ⊂ ! (ℎ 9′,≻ ∗ 8 ). Since ℎ 9′ ≻8 ℎ 9 , we know that ℎ 9′ ∉ ! (ℎ 9 , ≻8), so we have ! (ℎ 9 ,≻8) ⊂ ! (ℎ 9 , ≻ ∗ 8 ). So, if c is preference-monotonic, ℎ 9 = ℎ 9′ which contradicts with our assumption. To sum up, a diffusion one-sided matching mechanism is IC if and only if it is preferencemonotonic and diffusion-monotonic. Next, we show how to use our characterization to design an IC diffusion one-sided matching mechanism. Based on the two monotonicity conditions, we construct a simple pair-wise rule. Following a pre-defined order, we let agent 1 with the smallest order choose her favorite neighbor agent 2. If agent 2 finds ℎ1 acceptable, agents 1 and 2 form a trading cycle and get traded. Otherwise, agent 2 leaves with her own item, and agent 1 chooses her next favorite neighbor (as shown in Figure 8 (a)). This trivial mechanism satisfies preference monotonicity since agents always trade with their favorite neighbors that find them acceptable. For diffusion monotonicity, since agents can only choose from their neighbors and the chosen neighbor either accepts the trade or leaves alone, inviting more neighbors guarantees the same, if not better, result. 14
We can take one step further and extend it to a three-agent version without violating the monotonicity conditions. Whenever an agent chooses her favorite neighbor agent 2, 2 can also choose one from the common neighbors of agents 1 and 2, say agent 3. Now, agent 3 can either choose agent 1 or stay with her own good (as shown in Figure 8 (b)). Notice that, it is also natural to allow agent 3 to choose agent 2, and they can get traded. This is because the neighbor relationship between agents 2 and 3 is irrelevant to others’ actions (as shown in Figure 8 (c)). We can further expand this to any size. All agents can choose their favorite among their neighbors (as shown in Figure 8 (d)). By doing so, we no longer need the pre-defined order to determine which agent should leave or trade, since there always exists at least one trading cycle and each agent’s allocation is only determined by whether the agent is in a trading cycle or not. Therefore, we can ignore the pre-defined order and then the mechanism is equivalent to SWN. As shown above, we can first construct a trivial solution that satisfies the monotonicity conditions, and gradually refine it to meet other properties. 8 conclusion This work promotes the theoretical boundary regarding optimality and stability for one-sided matching with initial endowments over social networks. We design the Connected Trading Cycles that satisfies IC, IR, stable-cc, and optimal-c. Furthermore, we propose the first IC characterization in the network setting to complete the theoretical framework. There are still open questions worth investigating in this field.