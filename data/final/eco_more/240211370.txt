We study a matching problem between agents and public goods, in settings without monetary transfers. Since goods are public, they have no capacity constraints. There is no exogenously defined budget of goods to be provided. Rather, each provided good must justify its cost, leading to strong complementarities in the “preferences” of goods. Furthermore, goods that are in high demand given other already-provided goods must also be provided. The question of the existence of a stable solution (a menu of public goods to be provided) exhibits a rich combinatorial structure. We uncover sufficient conditions and necessary conditions for guaranteeing the existence of a stable solution, and derive both positive and negative results for strategyproof stable matching. introduction 1 1.1 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 2 model and notation 5  3 simple lower and upper bounds 6  4 tightness of the lower bound for g ≤ 6 8 4.1 Analytic Proof for g ≤ 4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 4.2 Computer-Assisted Proof for g = 5, 6 . . . . . . . . . . . . . . . . . . . . . . 12 5 g = 7 and beyond 14 5.1 Improved Lower Bound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 5.2 Improved Upper Bound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 6 strategic considerations 19 6.1 Strategyproof Mechanism for g = 2 . . . . . . . . . . . . . . . . . . . . . . . 20 6.2 Impossibility of Stategyproofness for 3 ≤ g ≤ 6 . . . . . . . . . . . . . . . . . 21 7 discussion 21 References 23 a supporting lemmas 24 B Inadequacy of a Greedy Algorithm for Finding a Stable Menu 26 c reformulation of the covering condition for complete preferences 27 D Validity of Improved Lower Bound for Complete Preferences 29
E Upper Bound with Linear-Time Algorithm via Structural Results 30 1 introduction Which courses should an online university offer? Courses have no cap on participation, but were the university to offer a non-demanded course, it would not recoup the cost of the course. On the other hand, were it to fail to offer a very demanded course, students would object. Where throughout a city would we expect to find ATMs (or vending machines)? There is virtually no limit on the amount of users of a single machine, however if a machine is in a spot that is not sufficiently convenient for many people, this machine would not cover its cost. On the other hand, if a spot that is convenient to many people does not have a machine, some company would respond to the opportunity. Finally, how should a group of hikers choose which trails to hike in small groups? On the one hand, heading out in too small of a group might not be safe. On the other hand, if a critical mass of people would rather hike another trail not included in the current plan, they would change plans and head together to that trail instead. Each of these problems can be viewed as a matching problem, of agents—students, customers, or hikers—to public goods—courses, ATMs/vending machines, or trails. In each of the above matching problems, there are no (upper) constraints on capacity for (i.e., no scarcity of “usage slots” for) public goods. However, there is a firm minimum usage on each provided public good; that is, the “preferences” of public goods over individual exhibit strong complementarities. Each of these two features—no capacity constraints on the one hand, and complementarities on the other hand—makes this problem starkly different than much of the literature on stable matching or stable assignments. And yet, it is natural to ask in this scenario how one might formalize the stability of a given offering of public goods, whether such a stable offering of public goods is guaranteed to exist, and, if and when it is guaranteed, whether there are any strategyproof stable mechanisms. In this paper, we initiate the study of these questions. Defining Stability. We consider a setting with a finite number of public goods that might be provided, and a finite number of unit-demand agents, each with a strict preference list over the public goods. A menu of public goods is a set of public goods that are provided. If a specific menu is provided, then each agent consumes from their favorite public good from this menu. Such a menu is t-feasible if when provided, each public good from the menu is consumed by at least t agents.1 This is a desideratum that pushes for less public goods to be provided, and becomes more restrictive as t grows. A menu is u-contestable if there exists
1In the courses example, this translates to the inability to charge more for some courses over others. In the ATM example, we thus capture settings in which there are fixed fees for ATM usage. In the vending machine example, we thus capture settings in which the prices of products sold are similar across machines. a public good not on the menu that u students prefer to all public goods on the menu. A menu is u-uncontestable if it is not u-contestable.2 This is a desideratum that pushes for more public goods to be provided, and becomes more restrictive as u shrinks. A menu is (t, u)-stable if it is both t-feasible and u-uncontestable. The notion of (t, u)-stability captures the idea that a public good covers its cost when it is used by at least t agents, and that if u or more agents demand an unprovided good, then market forces will lead to its offering.3
Existence. We start with the case of no setup costs or other frictions, i.e., with the case of (t, t)-stability.4 While for g = 2 a (t, t)-stable solution always exists, we show by an example that with g ≥ 3 public goods, there are menu selection problems and corresponding t such that no (t, t)-stable solution exists. Our first main question is for every g and t, therefore, how small (compared to t) can u be so that every menu selection problem with g goods has a (t, u)-stable solution. As it turns out, the answer is intimately connected to the ratio between u−1 and t−1, as already hinted by the following two relatively straightforward bounds:5 Proposition 1.1. For every g ≥ 3 and t, u ∈ N such that u−1 t−1 < 2, there exists a menu selection problem with g public goods that has no (t, u)-stable menu. Proposition 1.2. For every g ≥ 2 and t, u ∈ N such that u−1 t−1 ≥ g−1, every menu selection problem with g public goods has a (t, u)-stable menu. Trying to improve either of these bounds reveals intricate mathematical structure that must be mapped out and understood. Our first main result is that the lower bound in Proposition 1.1 is tight for all g ≤ 6. Theorem 1.3 (See Theorems 4.1 and 4.8). For every 3 ≤ g ≤ 6 and t, u ∈ N such that u−1 t−1 ≥ 2, every menu selection problem with g public goods has a (t, u)-stable menu. We prove Theorem 1.3 analytically for g = 3, 4. For g = 5, 6, we first use structural insights to reduce the question of an existence of a counterexample to a polyhedra covering problem that we encode as an SMT problem, and then computationally show that no counterexample exists via an SMT solver. 2In the courses example, one might imagine a complaint by u students as something that requires the university’s attention. In the ATM example, u-contestability might result in market forces adding a machine. 3Stability takes no stand on whether the public goods that are provided (or this hypothetical addition public good) are provided by the same provider or by different providers. 4As for the case of t > u, beyond being less economically motivated, we note that it is immediate to see that in this case, a (t, u)-stable solution is not guaranteed to exist; indeed, consider one public good and u agents who desire it. 5While this might suggest a reparametrization of the problem using t′ := t−1 and u′ := u−1, we avoid such a reparametrization as we find that the quantity t′—the maximum number of agents that is insufficient for sustaining the offering of a single public good—has a lesser direct economic meaning than t.
Surprisingly, running the same SMT problem for g = 7 reveals a counterexample showing
that Proposition 1.1 is no longer tight when g ≥ 7.6
Theorem 1.4. For every g ≥ 7 and t, u ∈ N such that u ≤ 23⌊ t−1 11 ⌋, there exists a menu selection problem with g public goods that has no (t, u)-stable menu. (When t−1 is divisible by 11, this condition is equivalent to u−1
t−1 < 23 11 ≈ 2.1.) Our second main result is a somewhat improved upper bound for all g.
Theorem 1.5. For every g ≥ 4 and t, u ∈ N such that u−1 t−1 ≥ g−2, every menu selection problem with g goods has a (t, u)-stable menu. Strategyproofness. In the second part of this paper, we focus on g ∈ {2, 3, 4, 5, 6}, i.e., the case in which we have a tight characterization for guaranteed existence, and ask for each such g whether there exists a strategyproof stable mechanism, i.e., a mechanism whose inputs are a menu selection problem with g public goods and with u−1 t−1 ≥ 2, 7 and whose output is a (t, u)-stable menu, which is strategyproof when its output is viewed as the matching that matches each agent to their favorite public good in the output menu. Due to nature of menu selection problems and the motivation behind them, another desideratum that we look for is for the mechanism to be anonymous, i.e, not factor in the identities of the different agents when selecting a stable menu. We first find a positive result. Theorem 1.6 (For more details, see Proposition 6.5). For g = 2, there exists a strategyproof anonymous stable mechanism. The mechanism constructed in Theorem 1.6 is based upon majority voting, carefully tweaked with respect to when both public goods should be provided and when none should be provided, on the one hand maintaining stability, and on the other controlling transitions between zero, one, and two provided public goods to remove any incentives to misreport. Our main result for strategyproofness is a negative result for higher numbers of goods. Theorem 1.7 (For more details, see Theorem 6.6). For g ∈ {3, 4, 5, 6}, every anonymous stable mechanism is not strategyproof. The major workhorse behind Theorem 1.7 is the Gibbard–Satterthwaite theorem (Gibbard, 1973; Satterthwaite, 1975), and the main challenge is how to transform a voting
6Ascertaining the tightness of the lower bound in Theorem 1.4, or alternatively further tightening it, whether for g = 7 or for higher values of g, seems beyond the computational capabilities at our disposal. Solving the same problem encoded as an ILP turns out to be even more computationally demanding (based on performance comparisons on lower values of g). 7Or u−1t−1 ≥ 1 when g = 2.
problem with g alternatives into a menu selection problem such that all stable menus are singletons. As it turns out, it is possible to construct such a transformation, where furthermore stability of the solution implies unanimity. This paper defines the stable menu selection problem, showcases that its solutions possess an intricate structure, providing nontrivial upper and lower bounds (tight for some g) for guaranteed existence, and maps out its strategic properties. While Theorem 1.3 completely resolves the guaranteed existence problem for g ≤ 6, Theorems 1.4 and 1.5 expose the complex structure of this problem for higher number of goods, and leave an asymptotic gap of constant vs. Θ(g) for this question, which we leave as an open problem. Open Question. For every g ≥ 7 and t ∈ N, what is the minimal value ug(t) such that every menu selection problem with g public goods has a ( t, ug(t) ) -stable solution? In particular, what is the asymptotic dependence of maxt ug(t)
t on g? 1.1 related work The stable matching literature began with the seminal paper of Gale and Shapley (1962), showing the existence of a stable matching for every 1-to-1 stable matching problem. It has been shown for various many-to-1 flavors of this problem that existence is maintained so long as the preferences on each side considers the entities on other side as substitutes (see, e.g., Hatfield and Milgrom, 2005; Hatfield and Kojima, 2010; Hatfield and Kominers, 2015). Strategic considerations for stable matching were first investigated by Dubins and Freedman (1981) and Roth (1982), who showed that the stable matching mechanism introduced by Gale and Shapley is strategyproof for one of the sides of the market. As noted, two major differences from the problems studies in this literature are the lack of (upper) capacity constraints on the public goods, and the strong complementarities exhibited by the “preferences” of the goods over sets of agents. The motivation for our problem is related to that of the literature on public projects (see, e.g., Papadimitriou, Schapira, and Singer, 2008), with a main difference being that no transfers are allowed in our model. The motivation is also related to that of facility location games initiated by (Hotelling, 1929), which features different solution concepts. Finally, there are also connections with the literature on committee selection (Aziz et al., 2017; Jiang, Munagala, and Wang, 2020), with a main difference being that in out model there is no exogenously determined “budget” of how many public goods could be offered, but rather public goods can be offered as long as their usage justifies it. 2 model and notation In this section, we formally introduce the stable menu selection problem. As will be seen below, we allow for students to have incomplete preference lists over public goods. While strictly speaking this makes the problem harder, we note that there does not seem to be a qualitative jump here. Indeed, we do not know how to significantly shorten our proofs for the case of only complete preferences, nor do we have additional or significantly stronger results for that setting (see also Lemma A.2 in Appendix A). Definition 2.1 (Menu Selection Problem). A menu selection problem (with unit demand) is a triplet ( N,G, (≻i)i∈N ) , where:
• N = {1, . . . , n} is a finite set of agents. A generic element of N will be denoted i. • G = {1, . . . , g} is a finite set of public goods. A generic element of G will be denoted j. • ≻i is an order over G of the form j1 ≻ · · · ≻ jg′ , where g′ ≤ g, and for jk ∈ G distinct. (In other words, agent i ranks their top g′ choices, with g′ potentially depending on i,
and any unranked choice is as good as some outside option.) Given a menu of public goods that are offered, each agent is assigned to their favorite of these public goods, if such a public good exists. Formally, we define the agent assignment as follows. Definition 2.2 (Agent Assignment). Given a menu selection problem ( N,G, (≻i)i∈N ) , for a menu O ⊆ G (of goods to be offered), we define the corresponding agent assignment aO : N → O ∪ {⊥} (here ⊥ is the “outside option”) as follows. For each agent i ∈ N , let G′ denote the public goods ranked in ≻i. If O ∩ G′ ̸= ∅, let aO(i) be agent i’s favorite public good (according to ≻i) in O. Otherwise, if O ∩G′ = ∅, then let aO(i) :=⊥. We now define the two main desiderata for a menu of public goods. The first, feasibility, pushes toward offering fewer public goods, while the second, uncontestability, pushes toward offering more public goods. This tension is at the heart of the problem that we describe. Definition 2.3 (Feasibility; Uncontestability). Let ( N,G, (≻i)i∈N ) be a menu selection problem, and let O ⊆ G be a menu of public goods to be offered. • For some t ∈ N, the menu O is said to be t-feasible if ∣∣a−1O (j)∣∣ ≥ t for every j ∈ O. That is, every offered public good j ∈ O is assigned to at least t agents. • For some u ∈ N, the menu O is said to be u-uncontestable if there exists no unoffered public good j ∈ G \ O such that ∣∣a−1O∪{j}(j)∣∣ ≥ u. That is, no unoffered public good has a lobby of at least u agents who prefer it over all public goods in O. Definition 2.4 (Stability). Let ( N,G, (≻i)i∈N ) be a menu selection problem. A menu of public goods O ⊆ G is said to be (t, u)-stable if it is t-feasible and u-uncontestable. Fact 2.5 (Monotonicity). Let ( N,G, (≻i)i∈N ) be a menu selection problem, and let O ⊆ G be a menu of public goods to be offered. • If O is t-feasible for some t ∈ N, then O′ is t′-feasible for all O′ ⊆ O and t′ ≤ t.
• If O is u-uncontestable for some u ∈ N, then O′ is u′-uncontestable for all O′ ⊇ O and u′ ≥ u. Finally we fix some notation. Let |j| := |a−1G (j)| denote the number of agents whose favorite public good is j. Let |j ≻ j′| := |a−1{j,j′}(j)| denote the number of agents who prefer public good j over public good j′. And more generally, for j ∈ G\O, let |j ≻ O| := |a−1O∪{j}(j)| denote the number of agents who prefer public good j over all public goods in O ⊆ G. 3 simple lower and upper bounds Our main question is for which menu selection problems a stable solution exists. As it turns out, an interesting (and useful) point of view into this question is to ask for which combination of parameters t, u ∈ N, and more specifically, for which ratio between u−1 and t−1, a stable solution is guaranteed to exist for all assignment problems. We start by demonstrating that for some such combinations of parameters, the existence of a stable solution is not guaranteed. Here we split into two cases: first, g = 2 and u−1 t−1 < 1, and second, g ≥ 3 and u−1 t−1 < 2. Proposition 3.1. For every t, u ∈ N such that u < t,8 there exists a menu selection problem on two public goods that has no (t, u)-stable menu. Proof. Consider a menu selection problem with u agents, all of whom have the preference list 1 ≻ 2. Then the menu ∅ is not u-uncontestable, because all u agents would lobby for public good 1 (or 2). However, any nonempty menu O ⊆ {1, 2} is not t-feasible, because there are only u < t agents. Proposition 1.1. For every g ≥ 3 and t, u ∈ N such that u−1 t−1 < 2, there exists a menu selection problem with g public goods that has no (t, u)-stable menu. Proof. Let x := ⌈ u 2 ⌉ < t. Set n := 3x, and set the preferences of the agents as follows:
8Note u < t is equivalent to u−1t−1 < 1. • 1 ≻i 2 ≻i 3 for every i ∈ {1, . . . , x},
• 2 ≻i 3 ≻i 1 for every i ∈ {x+1, . . . , 2x},
• 3 ≻i 1 ≻i 2 for every i ∈ {2x+1, . . . , 3x}. First, observe that no O ⊊ {1, 2, 3} can be t-feasible, because no agent will use public good k ∈ O \ {1, 2, 3}. So, a (t, u)-stable menu O must satisfy O ⊆ {1, 2, 3}. Reasoning by cases, we now show that no such O is both t-feasible and u-uncontestable. • |O| = 3: as the number of agents n satisfies n = 3x < 3t, we have that O is not t-feasible. • |O| = 2: by symmetry, assume without loss of generality that O = {1, 2}. By definition of aO, we have a −1 O (2) = {x+1, . . . , 2x}, and so ∣∣a−1O (2)∣∣ = x < t. Thus, O is not tfeasible. • |O| = 1: by symmetry, assume without loss of generality that O = {1}. We have 3 ≻i 1 = aO(i) for every i ∈ U := {x+1, . . . , 3x}, while |U | = 2x ≥ u, and so O is not u-uncontestable. • |O| = 0: as n = 3x ≥ u, we have that O = ∅ is not u-uncontestable. We conclude this section with a fairly simple upper bound, showing that if the ratio
between u− 1 and t− 1 is sufficiently large, then a stable solution is guaranteed to exist. Proposition 1.2. For every g ≥ 2 and t, u ∈ N such that u−1 t−1 ≥ g−1, every menu selection problem with g public goods has a (t, u)-stable menu. Proof. Let O := {k ∈ G : |k| ≥ t}. There are two cases. Case 1: O ̸= ∅. By construction, O is t-feasible. Additionally, each public good j ∈ G\O satisfies |j| < t, so the maximum possible lobby size is
max j∈G\O
|j ≻ O| ≤ (g − |O|)(t−1) ≤ (g−1)(t−1) < u. Thus O is (t, u)-stable. Case 2: O = ∅. If ∅ is u-uncontestable, then ∅ is (t, u)-stable, because ∅ is trivially t-feasible. Otherwise, there exists some k ∈ G such that |k ≻ ∅| ≥ u, so {k} is t-feasible. And if {k} is offered, the maximum possible lobby size is
max j∈G\{k}
|j ≻ {k}| ≤ (g−1)(t−1) < u,
so {k} is (t, u)-stable. Note that the gap between the lower bound of Proposition 1.1 and the upper bound of Proposition 1.2 is stark: the ratio between u and t is Θ(1) in the former, while it is Θ(g) in the latter. In the remainder of this paper, we explore the space between these two simple bounds. 4 tightness of the lower bound for g ≤ 6 In this section, possibly surprisingly, we show that the simple lower bound of Proposition 1.1 is in fact precisely tight for all g ≤ 6. That is, the condition presented in Proposition 1.1 is not only sufficient but also necessary for the inexistence of a solution for such g. We start by proving this tightness analytically for g ≤ 4 (Section 4.1), and then identify an equivalence to a polyhedra covering problem, which allows us to prove this tightness computationally all the way up to g = 6 (Section 4.2). Interestingly, this tightness ceases to hold starting at g = 7; this will be shown in Section 5, where we further study the domain of g ≥ 7. 4.1 analytic proof for g ≤ 4 In this section we prove the first two parts of Theorem 1.3 from the introduction. That is, we prove the tightness of the lower bound of Proposition 1.1 in the case g ≤ 4. Specifically, we prove the following. Theorem 4.1. For every g ∈ {3, 4} and t, u ∈ N such that u ≥ 2t−1, every menu selection problem with g public goods has a (t, u)-stable menu. Our proof idea is as follows. One simple way to find a (t, u)-stable menu O is to run a greedy algorithm: repeatedly add public goods demanded by ≥ u agents, and remove public goods only used by < t agents, until t-feasibility and u-uncontestability are both satisfied. If this algorithm stops, then the resulting menu is (t, u)-stable. However, this algorithm may not stop: In this case, by finiteness, it will cycle. As we will see, even for g = 4 this algorithm may indeed cycle (see Example 4.2), however an analysis of the cycle will allow us to nonetheless find a (t, u)-stable solution for g = 4.9
We begin by formally specifying the greedy algorithm (Algorithm 1). We denote a cycle of Algorithm 1 by, e.g.,
O1 −j1−−→ O2 +j2−−→ O3 +j3−−→ · · ·On +ji−−→ O1, 9This approach turns out to be insufficient for the case of g ≥ 5. See Appendix B for a demonstration. 10This can be replaced with any other menu of public goods with no change to the analysis below. 11This can be replaced with any other consistent tie-breaking with no change to the analysis below. 12This item can be consistently swapped with the preceding one with no change to the analysis below. Algorithm 1 Greedy algorithm for the menu selection problem
Initialize O ← ∅.10 while O is not (t, u)-stable do
if O is not t-feasible then By definition there exists j ∈ O such that |j ≻ O \ {j}| < t. Let j be a minimal11 such j, and update O ← O \ {j}. else if O is not u-uncontestable12 then By definition there exists j ∈ G \O such that |j ≻ O| ≥ u. Let j be a minimal11 such j, and update O ← O ∪ {j}. end if end while
where O2 = O1 \{j1}, O3 = O2∪{j2}, etc., and refer to this expression as a cycle transcript. Next we give an example for when Algorithm 1 may cycle in the case g = 4 (which straightforwardly generalizes to larger g). Example 4.2 (Greedy algorithm may cycle when g = 4). Let ( N,G, (≻i)i∈N ) be a menu selection problem with g = 4 and the following agents:
• t−1 agents have preference 4 ≻ 3 ≻ 2 ≻ 1
• t−1 agents have preference 3 ≻ 2 ≻ 1 ≻ 4
• t−1 agents have preference 2 ≻ 1 ≻ 4 ≻ 3
• t−1 agents have preference 1 ≻ 4 ≻ 3 ≻ 2
Set u := 2t−1. Then the (t, u)-stable menus are {1, 3} and {2, 4}. However, Algorithm 1 cycles in the following way:
∅ +1−→ {1} +2−→ {1, 2} −1−→ {2} +3−→ {2, 3} −2−→ {3} +4−→ {3, 4} −3−→ {4} +1−→ {4, 1} −4−→ {1} → . . . The cycle in Example 4.2 has a simple structure: it alternates between menus of size 1
and 2. The following two lemmas show that when g = 4, all cycles must be of this form. Lemma 4.3. Assume u ≥ t. Each menu along a cycle of the above greedy algorithm has cardinality at least 1. Proof. Suppose for the sake of contradiction that ∅ appears in the cycle. Then the cycle transcript contains a step {j} −j−→ ∅ for some j ∈ G. Because j was removed along the cycle, it must also be added: thus, there exists some A ⊆ G with j /∈ A such that A +j−→ A ∪ {j} appears in the cycle transcript. Now, the {j} −j−→ ∅ step implies |j ≻ ∅| < t, and the
A +j−→ A ∪ {j} step implies |j ≻ A| ≥ u. But |j ≻ ∅| ≥ |j ≻ A|, and because u ≥ t, we have a contradiction. Lemma 4.4. Assume that u ≥ 2t−1. Each menu along a cycle of the above greedy algorithm has cardinality at most g−2. Proof. Assume for contradiction that a menu with cardinality at least g−1 exists along a cycle. So, there exists a menu A with |A| ≥ g−2 and a public good j /∈ A such that j is added to A along that cycle. Since j is added along that cycle, it is also removed from some menu B along that cycle. Thus, |j ≻ A| ≥ u and |j ≻ B| < t. We cannot have B ⊆ A, because this would imply t > |j ≻ B| ≥ |j ≻ A| ≥ u, a contradiction. Thus B ⊊ A. Since |A| = g−2 and j /∈ B, we have |B \A| = 1. Let k ∈ B \A denote this unique element. Since |j ≻ A| ≥ u, |j ≻ B| < t, and u ≥ 2t−1, there exist at least u− (t−1) ≥ t agents which satisfy j ≻ A but not j ≻ B. The only way for an agent satisfying j ≻ A to violate j ≻ B is for them to violate j ≻ k. Thus |k ≻ j ≻ A| ≥ t, which implies |k ≻ G \ {k}| ≥ t. In other words, at least t agents prefer k the most; therefore, k is always assigned to at least t agents if offered. But k /∈ A while k ∈ B, so k is removed along that cycle—a contradiction. Lemma 4.4 implies that when g = 4, if Algorithm 1 cycles, the cycle must be of the form
{j1} → {j1, j2} → {j2} → {j2, j3} → · · · → {jℓ−1} → {jℓ−1, jℓ} → {jℓ} → {jℓ, j1} → {j1},
where ℓ ∈ {2, 3, 4}. It remains to analyze these cases. In Lemma 4.5 and Lemma 4.6, we show that ℓ = 2, 3 are impossible. Finally, in Lemma 4.7, we show that when ℓ = 4, a (t, u)-stable menu can be computed from the cycle transcript directly. Lemma 4.5. Consider a menu selection problem ( N,G, (≻i)i∈N ) with g ≥ 2 and u ≥ t. Algorithm 1 cannot cycle in the following way, for distinct j1, j2 ∈ G:
{j1} → {j1, j2} → {j1}. Proof. Suppose such a cycle exists. The step {j1} → {j1, j2} implies |j2 ≻ j1| ≥ u, and the step {j1, j2} → {j1} implies |j2 ≻ j1| < t. This cannot happen if u ≥ t.
Lemma 4.6. Consider a menu selection problem ( N,G, (≻i)i∈N ) with g ≥ 3 and u ≥ 2t−1. Algorithm 1 cannot cycle in the following way, for distinct j1, j2, j3 ∈ G:
{j1} → {j1, j2} → {j2} → {j2, j3} → {j3} → {j3, j1} → {j1}. Proof. Suppose such a cycle exists. The step {j1} → {j1, j2} implies |j2 ≻ j1| ≥ u, and the steps {j2, j3} → {j3} and {j3, j1} → {j1} imply |j2 ≻ j3| < t and |j3 ≻ j1| < t. Notice that for any agent i for which j2 ≻i j1, we must have j2 ≻i j3 or j3 ≻i j1. Thus |j2 ≻ j1| ≤ |j2 ≻ j3|+ |j3 ≻ j1| ≤ 2(t−1) < u.
Lemma 4.7. Consider a menu selection problem ( N,G, (≻i)i∈N ) with g ≥ 4 and u ≥ 2t−1. For distinct j1, j2, j3, j4 ∈ G, if Algorithm 1 cycles like
{j1} → {j1, j2} → {j2} → {j2, j3} → {j3} → {j3, j4} → {j4} → {j4, j1} → {j1},
then {j1, j3} and {j2, j4} are t-feasible and u-uncontestable. Proof. We will prove {j1, j3} is t-feasible and u-uncontestable, as the proof is symmetric for {j2, j4}. To show t-feasibility, notice
|j3 ≻ j1| ≥ |j3 ≻ j2| − |j1 ≻ j2| ≥ t |j1 ≻ j3| ≥ |j1 ≻ j4| − |j3 ≻ j4| ≥ t,
where here we are using |j3 ≻ j2|, |j1 ≻ j4| ≥ u and |j1 ≻ j2|, |j3 ≻ j4| < t. To show u-uncontestability, notice
|j2 ≻ {j1, j3}| ≤ |j2 ≻ j3| < t ≤ u |j4 ≻ {j1, j3}| ≤ |j4 ≻ j1| < t ≤ u,
where here we are using |j2 ≻ j3|, |j4 ≻ j1| < t.
Finally, we combine the above lemmas to prove Theorem 4.1. Proof of Theorem 4.1. By Lemma A.4, it suffices to consider the case |j| < t for all j ∈ G. In this setting, every O ⊆ G with |O| = 2 is u-uncontestable, because the maximum possible lobby size is
max j∈G\O
|j ≻ O| ≤ (g−|O|)(t−1) ≤ 2(t−1) < u. Now, run Algorithm 1 on this menu selection problem. If there is a cycle, the cycle must
be of the form
{j1} → {j1, j2} → {j2} → {j2, j3} → · · · → {jℓ−1} → {jℓ−1, jℓ} → {jℓ} → {jℓ, j1} → {j1},
where ℓ ≤ 4. By Lemmas 4.5 and 4.6, in fact ℓ = 4. And by Lemma 4.7, a t-feasible and u-uncontestable O ⊆ G exists. 4.2 computer-assisted proof for g = 5, 6 In this section we prove the remaining two parts of Theorem 1.3 from the introduction. That is, we prove the tightness of the lower bound of Proposition 1.1 in the cases g ∈ {5, 6}. Theorem 4.8. For every g ∈ {5, 6} and t, u ∈ N such that u ≥ 2t−1, every menu selection problem with g public goods has a (t, u)-stable menu. We prove this upper bound in a computer-aided manner: we analytically show that any instance of a menu selection problem is equivalent to a polyhedra covering problem, which we solve using the open-source SMT solver z3 (De Moura and Bjørner, 2008).13 Specifically, we can encode any instance of a menu selection problem on g public goods (for now assume complete preferences) as a point in Zg!, where each component counts the number of agents with a specific preference. Moreover, for each menu O ⊆ G, we show that the condition “O is (t, u)-stable for a menu selection problem” is equivalent to the condition “the menu selection problem’s encoding x ∈ Zg! is contained in some polyhedron P g,t,uO .” Thus, every menu selection problem has a (t, u)-stable solution if and only if Zg!≥0 is covered by the polyhedra P g,t,uO for all O ⊆ G. 4.2.1 notation Fix the number of public goods g, as well as the parameters t and u. Let G = {1, 2, . . . , g} denote the menu of all public goods. Let P denote some set of preferences ≻ over G, and fix some ordering of the elements of P . First we specify how to convert a menu selection problem into a point in high-dimensional
space. Definition 4.9. Let ( N,G, (≻i)i∈N ) be a menu selection problem for which {≻i: i ∈ N} ⊆ P for some set P of preferences over G. An agent cohort is a vector x ∈ Z|P|, indexed by preferences ≻∈ P , where x≻ is defined to be the number of agents in ( N,G, (≻i)i∈N ) with preferences equal to ≻. Next we define the polyhedra P g,t,uO for all O ⊆ G in such a way such that an agent cohort x satisfies x ∈ P g,t,uO if and only if O is (t, u)-stable for the menu selection problem corresponding to x. 13Our code is publicly available at the GitHub repository https://github.com/sara-fish/ stable-menus-of-public-goods. There we explore two methods for solving our particular polyhedra covering problem: One, by encoding as a SMT problem (and solving with z3), and two, by encoding as an ILP (and solving with Gurobi). The SMT solver approach is substantially faster, so we focus on it in our exposition. Definition 4.10. The matrix associated with O ⊆ G is denoted Ag,t,uO . We specify A g,t,u O ∈ Zg×|P| by specifying each row ai at a time. For all i = 1, . . . , g:
• (t-feasibility) If i ∈ O: for each ≻∈ P , set a(≻)i = 1 if i ≻ O \ {i}, and 0 otherwise. • (u-uncontestability) If i /∈ O: for each ≻∈ P , set a(≻)i = 1 if i ≻ O, and 0 otherwise. Definition 4.11. The polyhedron associated with O ⊆ G, denoted P g,t,uO , is given by {x ∈ Z|P|≥0 : DA g Ox ≥ b}, where D ∈ Zg×g and b ∈ Zg are defined as follows:
• To specify D, set D(ii) := 1 if i ∈ O and D(ii) := −1 if i /∈ O (and D(ij) := 0 for i ̸= j). • To specify b, set b(i) := t if i ∈ O and b(i) := −(u−1) if i /∈ O. The following proposition follows directly from the above definitions. Proposition 4.12. Fix t, u ∈ N. The following two statements are equivalent:
(1) The polyhedra P g,t,uO (for all O ⊆ G) cover Z |P| ≥0, that is, Z |P| ≥0 ⊆ ⋃ O⊆G P g,t,u O . (2) For every menu selection problem on g public goods, there exists a (t, u)-stable set. 4.2.2 smt solver calculation By Proposition 4.12, to prove there exists a (t, u)-stable menu for all menu selection problems (over preferences P) on g public goods, it suffices to show Z|P|≥0 ⊆ ⋃ O⊆G P g,t,u O . In other words, for g ≤ 6, we wish to show:
∀x ∈ Z|P|≥0, ∀t, u ∈ N s.t. u ≥ 2t−1, ∃O ⊆ G s.t. x ∈ P g,t,u O ,
or equivalently,
¬ [∃x ∈ Z|P|≥0, ∃t, u ∈ N s.t. u ≥ 2t−1, s.t. ∀O ⊆ G, x /∈ P g,t,u O ]. (∗)
SMT solvers are especially well-equipped to verify expressions like (∗). An SMT (satisfiability modulo theories) solver takes as input simple mathematical and logical constraints over variables, and outputs whether the constraints are satisfiable or unsatisfiable. We obtain the most general result when we let P be the set of all preferences of the form j1 ≻ · · · ≻ jc′ , where g′ ≤ g, and for ji distinct (that is, all preferences permitted in Definition 2.1). Note |P| = ∑g k=0 g! k! . In our case, the variables consist of |P| + 2 nonnegative integers (the |P| components of x, as well as t and u), and there are 2g constraints (one for each O ⊆ G). Recall
P g,t,uO = {x ∈ Z |P| ≥0 : DA g,t,u O x ≥ b}, where D is a diagonal matrix. Let ai denote the ith row of Ag,t,uO ∈ Zg×|P| and b(i) the ith entry of b ∈ Zg. Thus,
x /∈ P g,t,uO ⇐⇒ g∨
i=1
[⟨D(ii)ai, x⟩ < b(i)]. This is an OR of g integer linear inequalities, which are constraints SMT solvers can generally handle. Using Z3Py, a Python API, we input (∗) into the SMT solver z3. Specifically, we input the statement ¬(∗), so that an output of “unsatisfiable” means every menu selection problem has a (t, u)-stable set, for that particular value of g. For each g = 5, 6 (and also for g = 3, 4), the SMT solver returned “unsatisfiable”. Proving upper bounds using this method becomes computationally infeasible for larger g. Note for example the exponential dependence of |P| on g. Moreover, fundamentally this method involves solving an instance of a polyhedra covering problem, and this family of problems is coNP-hard in general.14 Nonwithstanding there is much structure to this particular instance (especially in the case of complete preferences, see Appendix C). It is an interesting open problem to find a computationally efficient algorithm that checks, for fixed
g, t, u, whether Z|P|≥0 ⊆ ⋃ O⊆G P g,t,u O . 5 g = 7 and beyond In Section 3, we show that a menu selection problem must have a solution when u−1 t−1 ≥ g−1, and may not have a solution when u−1 t−1 < 2. In this section, we improve on these simple bounds in both directions. 5.1 improved lower bound Using an SMT solver (see Section 4.2 for details), we computationally found a menu selection problem on g = 7 public goods for which there exists no (t, u)-stable menu in the case u ≥ 2t−1. The SMT solver outputted a complex menu selection problem on n = 144 agents with t = 24 and u = 47 (these t, u in particular satisfy u−1
t−1 = 2). By studying this
counterexample and manually simplifying it, we obtain the following improved lower bound (cf. Proposition 1.1). 14To encode an instance of 3-SAT on n variables x1, . . . , xn as a polyhedra covering problem (whether input polyhedra Pi cover some polyhedron Q): set Q = [0, 1]
n and encode each clause as follows: e.g. clause (xi ∨ xj ∨ ¬xk) becomes the polyhedron {x : x(i) > 1/2} ∩ {x : x(j) > 1/2} ∩ {x : x(k) ≤ 1/2}. Finally, intersecting with Zn does not change this analysis. Theorem 1.4. For every g ≥ 7 and t, u ∈ N such that u ≤ 23⌊ t−1 11 ⌋, there exists a menu selection problem with g public goods that has no (t, u)-stable menu. (When t−1 is divisible by 11, this condition is equivalent to u−1
t−1 < 23 11 ≈ 2.1.) We prove Theorem 1.4 by constructing a menu selection problem for which no (t, u)-stable
solution exists. To construct this problem, let x := ⌊ t−1 11 ⌋. Set u′ := 23x and t′ := 11x+ 1. Then u ≤ u′ and t′ ≤ t. By monotonicity (Fact 2.5), it suffices to find a menu selection problem for which there exists no (t′, u′)-stable menu of public goods. To this end, consider the set of agents in Table 1. First, observe that any t′-feasible O ⊆ G must satisfy O ⊆ {1, 2, 3, 4, 5, 6, 7}, because these are the only ranked public goods. Thus, to show the set of agents in Table 1 has no (t′, u′)-stable menu of public goods, by monotonicity (Fact 2.5) it suffices to prove the following two lemmas. Lemma 5.1. Every O ⊆ {1, 2, 3, 4, 5, 6, 7} with |O| = 3 is not u′-uncontestable. Lemma 5.2. Every O ⊆ {1, 2, 3, 4, 5, 6, 7} with |O| = 4 is not t′-feasible. We verify these claims by casework. Note by symmetry, each of the cases |O| = 3 and |O| = 4 only require checking ( 7 3 ) /7 = ( 7 4 ) /7 = 5 menus. Proof of Lemma 5.1. By symmetry, it suffices to show each of the ( 7 3 ) /7 = 5 values of O are not u′-uncontestable:
• O = {1, 2, 3}. Then |6 ≻ O| = 5x+ 5x+ 5x+ 3x+ 3x+ x+ x = 23x ≥ u′. • O = {1, 2, 4}. Then |7 ≻ O| = 5x+ 5x+ 5x+ 3x+ 3x+ x+ x = 23x ≥ u′. • O = {1, 2, 5}. Then |7 ≻ O| = 5x+ 5x+ 3x+ 3x+ 3x+ x+ x+ x+ x = 23x ≥ u′. • O = {1, 2, 6}. Then |5 ≻ O| = 5x+ 5x+ 5x+ 3x+ 3x+ x+ x+ x+ x = 23x ≥ u′. • O = {1, 3, 5}. Then |7 ≻ O| = 5x+5x+3x+3x+x+x+x+x+x+x+x = 23x ≥ u′. Proof of Lemma 5.2. By symmetry, it suffices to show each of the ( 7 4 ) /7 = 5 values of O are not t′-feasible:
• O = {1, 2, 3, 4}. Then |4 ≻ O \ {4}| = 5x+ 3x+ x+ x+ x = 11x < t′. • O = {1, 2, 3, 5}. Then |3 ≻ O \ {3}| = 5x+ 3x+ x+ x+ x = 11x < t′. • O = {1, 2, 3, 6}. Then |2 ≻ O \ {2}| = 5x+ 3x+ x+ x+ x = 11x < t′. • O = {1, 2, 4, 5}. Then |5 ≻ O \ {5}| = 5x+ 3x+ x+ x+ x = 11x < t′. • O = {1, 2, 4, 6}. Then |2 ≻ O \ {2}| = 5x+ 3x+ x+ x = 10x < t′. Remark 5.3. Using an SMT solver (see Section 4.2), we attempted to search for stronger lower bounds by checking whether 11u ≥ 23(t− 1) + 1 is satisfiable when g ≥ 7. One month of computation on the equivalent of a modern laptop were not sufficient to determine satisfiability. 5.2 improved upper bound In this section we slightly improve upon the upper bound in Proposition 1.2. Our main result is the following. Theorem 1.5. For every g ≥ 4 and t, u ∈ N such that u−1 t−1 ≥ g−2, every menu selection problem with g goods has a (t, u)-stable menu. At the heart of Theorem 1.5 is the following lemma. Lemma 5.4. Fix any g ≥ 2 and t, u ∈ N such that u ≥ 2t−1. Then for every menu selection problem, at least one of the following is true:
(1) There exists some O ⊆ G with |O| = 1 such that O is u-uncontestable. (2) There exists some O ⊆ G with |O| = 2 such that O is t-feasible. Remark 5.5. In both of our lower bound constructions (Proposition 1.1, Theorem 1.4), the constructed menu selection problem not only satisfies the property that for all O ⊆ G, either O is not t-feasible or O is not u-uncontestable. In fact, a stronger property holds: there exists some k, such that all O ⊆ G with |O| = k are not u-uncontestable, and all O ⊆ G
with |O| = k + 1 are not t-feasible. (In the case of Proposition 1.1, we have k = 1, and in the case of Theorem 1.4, we have k = 3.) If there does not exist a menu selection problem satisfying this property, we say that there are no (k, k + 1)-gaps for parameters g, t, u. In particular, Lemma 5.4 says that when u ≥ 2t−1, there are no (1,2)-gaps. Moreover, Proposition 1.1 demonstrates the existence of (1,2)-gaps when u ≤ 2t− 2. Thus, by Proposition 4.12, when g ≤ 6, fixing t and u, we have that there are no (1,2)-gaps for g, t, u if and only if all menu selection problems have a (t, u)-stable solution. For g ≥ 7, it is an open question whether such “no gaps” conditions are sufficient to imply the existence of (t, u)-stable solutions (it follows from monotonicity that they are necessary). We first prove Theorem 1.5 using Lemma 5.4 as well as two simple lemmas that we prove
in Appendix A, and later prove Lemma 5.4. Proof of Theorem 1.5. By Lemma 5.4, it suffices to consider two cases. In the first case, there exists some u-uncontestable O ⊆ G′ with |O| = 1. Moreover, O is t-feasible, because by Lemma A.3, we can assume that each public good is ranked by at least t agents. Thus O is (t, u)-stable. In the second case, there exists some t-feasible O ⊆ G′ with |O| = 2. By Lemma A.4, we can assume |j| < t for each j ∈ G, so the maximum possible lobby size is
max j∈G′\O
|j ≻ O| ≤ (|G′| − |O|)(t−1) ≤ (g−2)(t−1) < u. Thus O is (t, u)-stable. 5.2.1 proof of lemma 5.4 Proof. Case g = 2: suppose neither (1) nor (2) holds. Then |1 ≻ 2| ≥ u, |2 ≻ 1| ≥ u, and |1 ≻ 2| < t OR |2 ≻ 1| < t. Since u ≥ t these cannot all hold. Now we consider some g ≥ 3 (and assume the claim holds for smaller g). Again assume neither (1) nor (2) hold. We aim to derive a contradiction. Write xij := |i ≻ j| for short. Then all of the following statements hold:
(∗) All O with |O| = 1 not u-uncontestable: For all i ∈ G: ∨
j ̸=i(xji ≥ u). (∗∗) All O with |O| = 2 not t-feasible: For all {i, j} ⊆ G: (xij < t) ∨ (xji < t). Let Bk := G \ {k}. Consider the following smaller instance of the problem:
• For all i ∈ B: ∨
j ̸=i(xji ≥ u). • For all {i, j} ⊆ B: (xij < t) ∨ (xji < t). By (∗∗), all of the < t constraints here are true. By induction (this is a smaller subproblem), one of the ≥ u constraints must be false. Specifically, say the constraint ∨ j ̸=ik(xjik ≥ u) is the false one, for some ik ∈ G. But also, we know all of the (∗) constraints are true. Thus xkik ≥ u. Do this for all k.
Also note: since xkik ≥ u for all k ∈ G, by (∗∗), we have xikk < t for all k. Now, without loss of generality, we can relabel so that i1 = 2, i2 = 3, . . . , iℓ = 1 for some
ℓ ≤ g. Thus we end up with the following constraints:
x12 ≥ u, x23 ≥ u, . . . , xℓ−1,ℓ ≥ u, xℓ1 ≥ u
x21 < t, x32 < t, . . . , xℓ,ℓ−1 < t, x1ℓ < t.
Now we will use the following lemma many times:
Lemma 5.6. For all distinct i, j, k, when u ≥ 2t−1, if xij ≥ u and xkj < t, then xik ≥ t.
Proof. |i ≻ j| ≥ u and |k ≻ j| < t means that there are u agents who prefer i over j, and only < t of them prefer k over j. This means that the rest prefer j over k. Thus there exist at least u − (t − 1) ≥ t agents with who prefer both i over j and j over k. In particular, there exist ≥ t agents who prefer i over k.
Finally we write down a table of deductions, until we reach a contradiction. Row # Reason
1 x12 x23 . . . xℓ−1,ℓ xℓ1 ≥ u Given 2 x21 x32 . . . xℓ,ℓ−1 x1ℓ < t (∗∗) on #1 3 x32 x43 . . . x1,ℓ x21 < t rearrange 4 x13 x24 . . . xℓ−1,1 xℓ2 ≥ t Lemma 5.6 on #1, #3 5 x31 x42 . . . x1,ℓ−1 x2ℓ < t (∗∗) on #4 6 x42 x53 . . . x2ℓ x31 < t rearrange 7 x14 x25 . . . xℓ−1,2 xℓ3 ≥ t Lemma 5.6 on #1,#6 8 x41 x52 . . . x2,ℓ−1 x3ℓ < t (∗∗) on # 7 ... ... ... ... ... ... ... ...
3ℓ− 4 xℓ1 x12 . . . xℓ−2,ℓ−1 xℓ−1,ℓ < t as above
However, rows 1 and 3ℓ − 4 conflict. Thus, the constraints xkik ≥ u are not simultaneously satisfiable, which in turn implies that the original (∗) and (∗∗) are not simultaneously satisfiable. 6 strategic considerations So far this paper has focused on the question of guaranteed existence of solutions to the menu selection problem: for which g, t, u does there exist a (t, u)-stable solution to every menu selection problem on g public goods? In this section, we focus on parameters g, t, u such that this existence question is settled in the affirmative,15 and instead consider the question of strategyproofness. Specifically, we ask: for which g does there exist a strategyproof stable menu selection mechanism? We start by defining what we mean by stable menu selection mechanism and by strategyproofness of such a mechanism. Definition 6.1. Fix g ≥ 2 and let P be a set of menu selection problems on g public goods. A set of stability parameters S ⊆ N2 guarantees existence for P if for all (t, u) ∈ S, every menu selection problem P ∈ P has a (t, u)-stable solution. For example, when g = 2, the set S = {(t, u) : u ≥ t} guarantees existence for all menu selection problems, and when g ∈ {3, 4, 5, 6}, the set S = {(t, u) : u ≥ 2t − 1} guarantees existence for all menu selection problems. Definition 6.2 (Stable Menu Selection Mechanism). Fix g ≥ 2 and let P be a set of menu selection problems on g public goods. Let S ⊆ N2 be a set of stability parameters that guarantees existence for P . A mechanismM : P × S → 2G is said to be stable if for every P ∈ P and (t, u) ∈ S, the menuM ( P, (t, u) ) is (t, u)-stable. Definition 6.3 (Strategyproof Menu Selection Mechanism). Fix g ≥ 2 and let P be a set of menu selection problems on g public goods. Let S ⊆ N2 be a set of stability parameters that guarantees existence for P . A mechanismM : P × S → 2G is said to be strategyproof if for all agents i ∈ N , for all menu selection problems ( N,G, (≻i)i∈N ) = P ∈ P and(
N,G, (≻′i)i∈N ) = P ′ ∈ P with ≻j=≻′j when j ̸= i, we have
aM(P,(t,u))(i) ≽i aM(P ′,(t,u))(i). That is, no agent can strictly improve their outcome by misreporting. Definition 6.4 (Anonymous Menu Selection Mechanism). Fix g ≥ 2 and let P be a set of menu selection problems on g public goods. Let S ⊆ N2 be a set of stability parameters that guarantees existence for P . A mechanismM : P × S → 2G is said to be anonymous if for every menu selection problem ( N,G, (≻i)i∈N ) ∈ P and every permutation σ : N → N we
15When g = 2, we have guaranteed existence if and only if u ≥ t. When g ∈ {3, 4, 5, 6}, we have guaranteed existence if and only if u ≥ 2t− 1.
have
M (( N,G, (≻i)i∈N ) , (t, u) ) = M (( N,G, (≻σ(i))i∈N ) , (t, u) ) . That is, each agent is treated equally by the mechanism, in the sense that the output of the mechanism does not depend on the identity of the agent who submitted each preference list. In this section, we ask for which numbers of goods g it is the case that strategyproof anonymous stable mechanisms exist. In the case g = 2, we exhibit a simple anonymous mechanism on complete preferences and prove it is stable and strategyproof (Section 6.1). In the case g ∈ {3, 4, 5, 6}, we prove fundamental barriers for strategyproofness that contrast with the case of g = 2. 6.1 strategyproof mechanism for g = 2 Below, we exhibit a simple, natural strategyproof and anonymous mechanism that produces stable solutions to the menu selection problem for the case of complete preferences and g = 2. Proposition 6.5 (Strategyproofness for g = 2 on Complete Preferences). Fix g = 2. Let S = { (t, u) ∈ N2 ∣∣ u ≥ t}. Let P be the set of all menu selection problems on complete preferences with two public goods. Define a mechanismM : P ×S → 2G such that for every (t, u) ∈ S and P ∈ P:
• If P has less than t agents, thenM ( P, (t, u) ) := ∅. (“offer ∅ if no other option”)
• Otherwise, if {1, 2} is (t, u)-stable for P , thenM ( P, (t, u) ) := {1, 2}. (“offer {1, 2} if
possible”)
• Otherwise,M ( P, (t, u) ) := {1} if |1 ≻ 2| ≥ |2 ≻ 1| andM ( P, (t, u) ) := {2} otherwise. (“majority vote”)
ThenM is a strategyproof anonymous stable mechanism. Proof. If P has less than t agents, then no manipulation can affect this condition, so ∅ will be offered no matter what. Thus we can assume n ≥ t.
Set x1 := |1 ≻ 2| and x2 := |2 ≻ 1|. Observe the output ofM(·, (t, u)) only depends on x1 and x2 (the condition “{1, 2} is (t, u)-stable” is equivalent to “x1 ≥ t and x2 ≥ t”). We can thus define a function M : Z2≥0 → 2G given by M(x1, x2) := M(P, (t, u)), where P is any menu selection problem such that x1 := |1 ≻ 2| and x2 := |2 ≻ 1|. We call such an x the summary statistics of a given set of preferences. Next we observe that M satisfies monotonicity in the following sense: for all x ∈ Z2≥0 and j ∈ {1, 2}, we have M(x+ ej) \M(x) ⊆ {j}, where e1 = (1,−1) and e2 = (−1, 1). Now suppose there exists a profitable manipulation by an agent with preferences j ≻ k. If truthful reporting corresponds to summary statistics x, then this agent’s manipulation would result in summary statistics x + ek. Because n ≥ t, such a manipulation must cause this agent’s top choice j to be offered, when it was previously not offered. But by monotonicity, if j /∈M(x), then j /∈M(x+ ek), so such a manipulation does not exist. 6.2 impossibility of stategyproofness for 3 ≤ g ≤ 6 Next, we show that for g ∈ {3, 4, 5, 6}, any anonymous mechanism that outputs stable solutions to the menu selection problem cannot also be strategyproof. Theorem 6.6. Fix g ∈ {3, 4, 5, 6}. Let S = { (t, u) ∈ N2 ∣∣ u ≥ 2t− 1}. Let P be the set of all menu selection problems on complete preferences with g public goods. Every anonymous stable mechanismM : P × S → 2G is not strategyproof. Proof. LetM be an anonymous stable mechanism. Let t ∈ N, let u = 2t−1, and let Pu ⊆ P be the set of all menu selection problems in P with u agents. First, we claim that M ( P, (t, u) ) is a singleton set for all P ∈ Pu. Because P has u
agents and the agents’ preferences are complete, ∅ is not (t, u)-stable, so ∣∣M(P, (t, u))∣∣ ≥ 1. Additionally, if some O ⊆ G with |O| ≥ 2 were t-feasible, then there would be at least 2t agents. But there are only u = 2t−1 agents. Thus
∣∣M(P, (t, u))∣∣ ≤ 1. BecauseM ( ·, (t, u) ) always outputs a singleton set over Pu, it induces a voting rule on g alternatives and u voters. Anonymity ofM implies that this voting rule is nondictatorial. Moreover, because M is stable, this voting rule is unanimous. To see this, consider any problem P ∈ Pu in which some public good j ∈ G is top ranked by all agents. Then O = {j} is the unique (t, u)-stable solution, because |k ≻ j| = 0 for every public good k ̸= j. SoM ( P, (t, u) ) = {j}. By the Gibbard-Satterthwaite Theorem (Gibbard, 1973; Satterthwaite, 1975), a unanimous nondictatorial voting rule is manipulable. Therefore, the voting rule induced byM is manipulable, and hence so isM. Therefore,M is not strategyproof. 7 discussion In this paper we formulated and initiated the study of a matching problem of a new flavor, provided nontrivial upper and lower bounds on the existence of a solution, and investigated the possibility of a strategyproof solution while unearthing a connection to voting theory. The problem, as formulated, is rather stylized. Yet, some other matching problems that started out similarly stylized eventually found real-world applications. A main limitation of our results is that they only give practical unrestricted guarantees for small numbers of public goods. For example, an online university looking to select which subset of six electives to offer to students in a specific small department can make use of the fact that a (11, 21)-stable menu exists. But, if that same university instead aims to select which subset of 600 electives to offer to the entire student body, then absent further assumptions, we only give a considerably less useful guarantee of the existence of a (11, 5981)-stable menu. Under added assumptions, however, our results imply useful guarantees even in large-scale settings. For example, suppose the university offering 600 electives has 100 departments, each of which aims to select a subset of six electives to offer, taking in account the preferences of students only in that department (and students most prefer to take electives within their department). Then, due to the “block structure” of the students’ preferences, we guarantee the existence of a (11, 21)-stable menu despite the large scale of this scenario. For the case of two public goods, our strategyproof mechanism is natural and practical: offer both if feasible; otherwise offer the most popular option. For between three and six public goods, we show that so long as u ≥ 2t−1, a stable menu of public goods exists, but it is generally impossible to find it in a strategyproof manner. We write “generally impossible” because there might still be opportunity for strategyproof matching in special cases. Our proof of Theorem 6.6 (corresponding to Theorem 1.7 from the introduction) utilizes a special case with n = u = 2t−1 to derive the impossibility.16 In many real-life settings, it might suffice to consider u > 2t−1 (or more generally, a smaller set S of supported stability parameters) or n > u (or more generally, a smaller set P of supported menu selection problems).
A potential barrier for usability from which our analysis does not suffer is computational tractability. Indeed, all our upper bounds are computationally tractable in the sense that a stable solution can be feasibly found. Our main open question from the introduction asks for tighter bounds for guaranteed existence of a stable solution, and it is plausible
16In a nutshell, u = 2t−1 is used to guarantee singleton menus, and hence a single winner of the voting rule, which is needed in order to apply the Gibbard–Satterthwaite Theorem. One might imagine relaxing this constrainst by appealing to variants of the Gibbard–Satterthwaite Theorem that allow for nonsingleton sets of winners, such as the Duggan—Schwartz Theorem (Duggan and Schwartz, 2000). Under suitable assumptions this would lead to the conclusion that the voting rule (and hence the menu selection mechanism) is manipulable, however, the notion of manipulability that is guaranteed by the Duggan–Schwartz Theorem differs from ours, and crucially, counts as manipulations some things that we do not consider as such in the menu selection setting. For example, if one’s true preferences are 2 ≻ 1, and {1, 2} is offered, in their setting misreporting so that only {2} is offered is considered a profitable manipulation, while in our setting we do not consider it as such. that tighter upper bounds obtained in follow-up work might be harder (or impossible) to translate into tractable algorithms. An open question that we already have in a similar vain is on the precise asymptotic running time for our tighter upper bound from Theorem 1.5. The algorithm that follows from our proof of that theorem is quadratic in the number of public goods, while the algorithm that follows from the proof of the looser upper bound from Proposition 1.2 is linear. In Appendix E we prove an upper bound slightly weaker than that from Theorem 1.5 but nonetheless stronger than that from Proposition 1.2, which still yields a linear-time algorithm. Is there a linear-time algorithm for finding a stable menu for all g, t, u such that u−1 t−1 ≥ g−2?